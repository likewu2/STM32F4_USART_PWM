
DENEME_SERVO_WITH_HC06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d00  08003d00  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d08  08003d08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000074  08003d84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003d84  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a643  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001970  00000000  00000000  0002a6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  0002c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217b9  00000000  00000000  0002d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae80  00000000  00000000  0004eeb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cac85  00000000  00000000  00059d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001249be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b4  00000000  00000000  00124a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c50 	.word	0x08003c50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08003c50 	.word	0x08003c50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14d      	bne.n	80002a4 <__udivmoddi4+0xac>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d968      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b152      	cbz	r2, 800022a <__udivmoddi4+0x32>
 8000214:	fa01 f302 	lsl.w	r3, r1, r2
 8000218:	f1c2 0120 	rsb	r1, r2, #32
 800021c:	fa20 f101 	lsr.w	r1, r0, r1
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	ea41 0803 	orr.w	r8, r1, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800022e:	0c21      	lsrs	r1, r4, #16
 8000230:	fbb8 fef5 	udiv	lr, r8, r5
 8000234:	fa1f f78c 	uxth.w	r7, ip
 8000238:	fb05 831e 	mls	r3, r5, lr, r8
 800023c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000240:	fb0e f107 	mul.w	r1, lr, r7
 8000244:	4299      	cmp	r1, r3
 8000246:	d90b      	bls.n	8000260 <__udivmoddi4+0x68>
 8000248:	eb1c 0303 	adds.w	r3, ip, r3
 800024c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000250:	f080 811e 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000254:	4299      	cmp	r1, r3
 8000256:	f240 811b 	bls.w	8000490 <__udivmoddi4+0x298>
 800025a:	f1ae 0e02 	sub.w	lr, lr, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f5 	udiv	r0, r3, r5
 8000268:	fb05 3310 	mls	r3, r5, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x96>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8108 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8105 	bls.w	8000494 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000294:	2100      	movs	r1, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa8>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d908      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a8:	2e00      	cmp	r6, #0
 80002aa:	f000 80ee 	beq.w	800048a <__udivmoddi4+0x292>
 80002ae:	2100      	movs	r1, #0
 80002b0:	e9c6 0500 	strd	r0, r5, [r6]
 80002b4:	4608      	mov	r0, r1
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb65 0303 	sbc.w	r3, r5, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e2      	beq.n	80002a0 <__udivmoddi4+0xa8>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7df      	b.n	80002a0 <__udivmoddi4+0xa8>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8091 	bne.w	8000410 <__udivmoddi4+0x218>
 80002ee:	eba1 050c 	sub.w	r5, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000300:	fb07 5013 	mls	r0, r7, r3, r5
 8000304:	0c25      	lsrs	r5, r4, #16
 8000306:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	42a8      	cmp	r0, r5
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0505 	adds.w	r5, ip, r5
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	42a8      	cmp	r0, r5
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a2d      	subs	r5, r5, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb5 f0f7 	udiv	r0, r5, r7
 800032c:	fb07 5510 	mls	r5, r7, r0, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 35ff 	add.w	r5, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4628      	mov	r0, r5
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x9e>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa05 f301 	lsl.w	r3, r5, r1
 800036e:	431c      	orrs	r4, r3
 8000370:	40fd      	lsrs	r5, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f301 	lsl.w	r3, r0, r1
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 5518 	mls	r5, r9, r8, r5
 8000388:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	42a8      	cmp	r0, r5
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0505 	adds.w	r5, ip, r5
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	42a8      	cmp	r0, r5
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4465      	add	r5, ip
 80003b0:	1a2d      	subs	r5, r5, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003b8:	fb09 5510 	mls	r5, r9, r0, r5
 80003bc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45ae      	cmp	lr, r5
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0505 	adds.w	r5, ip, r5
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	45ae      	cmp	lr, r5
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4465      	add	r5, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba5 050e 	sub.w	r5, r5, lr
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15e      	cbz	r6, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb65 050e 	sbc.w	r5, r5, lr
 80003fa:	fa05 f707 	lsl.w	r7, r5, r7
 80003fe:	fa22 f301 	lsr.w	r3, r2, r1
 8000402:	40cd      	lsrs	r5, r1
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c6 7500 	strd	r7, r5, [r6]
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa25 f303 	lsr.w	r3, r5, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000430:	fb07 3011 	mls	r0, r7, r1, r3
 8000434:	0c2b      	lsrs	r3, r5, #16
 8000436:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800043a:	fb01 f00e 	mul.w	r0, r1, lr
 800043e:	4298      	cmp	r0, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f101 38ff 	add.w	r8, r1, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	4298      	cmp	r0, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3902      	subs	r1, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a1b      	subs	r3, r3, r0
 800045a:	b2ad      	uxth	r5, r5
 800045c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000460:	fb07 3310 	mls	r3, r7, r0, r3
 8000464:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000468:	fb00 f30e 	mul.w	r3, r0, lr
 800046c:	42ab      	cmp	r3, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 38ff 	add.w	r8, r0, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	42ab      	cmp	r3, r5
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	1aed      	subs	r5, r5, r3
 8000484:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e707      	b.n	80002a0 <__udivmoddi4+0xa8>
 8000490:	4686      	mov	lr, r0
 8000492:	e6e5      	b.n	8000260 <__udivmoddi4+0x68>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fa      	b.n	800028e <__udivmoddi4+0x96>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4641      	mov	r1, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4465      	add	r5, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4608      	mov	r0, r1
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <control>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void control()
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	  if (rx_data[0] == '+' )
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <control+0x50>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b2b      	cmp	r3, #43	; 0x2b
 80004d6:	d10a      	bne.n	80004ee <control+0x22>
	  {
		  if (counter <= 2400)
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <control+0x54>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80004e0:	d805      	bhi.n	80004ee <control+0x22>
			  counter += 100 ;
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <control+0x54>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	3364      	adds	r3, #100	; 0x64
 80004e8:	b29a      	uxth	r2, r3
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <control+0x54>)
 80004ec:	801a      	strh	r2, [r3, #0]

	  }
	  if (rx_data[0] == '-')
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <control+0x50>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b2d      	cmp	r3, #45	; 0x2d
 80004f4:	d10a      	bne.n	800050c <control+0x40>
	  {
		  if (counter >= 600) counter -= 100 ;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <control+0x54>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80004fe:	d305      	bcc.n	800050c <control+0x40>
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <control+0x54>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	3b64      	subs	r3, #100	; 0x64
 8000506:	b29a      	uxth	r2, r3
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <control+0x54>)
 800050a:	801a      	strh	r2, [r3, #0]
	  }

	  rx_data[0] = '\0' ; // Clear rx_data variable
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <control+0x50>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]

}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000110 	.word	0x20000110
 8000520:	20000000 	.word	0x20000000

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  fprintf(stderr, "Standard error message.\n");
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <main+0x68>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	2218      	movs	r2, #24
 8000530:	2101      	movs	r1, #1
 8000532:	4817      	ldr	r0, [pc, #92]	; (8000590 <main+0x6c>)
 8000534:	f002 fed0 	bl	80032d8 <fwrite>
  fprintf(stdout, "Standard error message.\n");
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <main+0x68>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	2218      	movs	r2, #24
 8000540:	2101      	movs	r1, #1
 8000542:	4813      	ldr	r0, [pc, #76]	; (8000590 <main+0x6c>)
 8000544:	f002 fec8 	bl	80032d8 <fwrite>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fb26 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f82a 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f932 	bl	80007b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000554:	f000 f906 	bl	8000764 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000558:	f000 f88e 	bl	8000678 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Start Timer for PWM
 800055c:	2100      	movs	r1, #0
 800055e:	480d      	ldr	r0, [pc, #52]	; (8000594 <main+0x70>)
 8000560:	f001 faf8 	bl	8001b54 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,counter);
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <main+0x74>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <main+0x70>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	635a      	str	r2, [r3, #52]	; 0x34

    /* USER CODE BEGIN 3 */

	  // Link of project video -------->  https://drive.google.com/file/d/1p5s7OUA4AjGCqYyCosQESfKeiAxB_qvp/view?usp=sharing

	  control();
 800056e:	f7ff ffad 	bl	80004cc <control>

	  HAL_UART_Receive(&huart1, (uint8_t *)rx_data, 3, 100);
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	2203      	movs	r2, #3
 8000576:	4909      	ldr	r1, [pc, #36]	; (800059c <main+0x78>)
 8000578:	4809      	ldr	r0, [pc, #36]	; (80005a0 <main+0x7c>)
 800057a:	f002 f87e 	bl	800267a <HAL_UART_Receive>

	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,counter);
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <main+0x74>)
 8000580:	881a      	ldrh	r2, [r3, #0]
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <main+0x70>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
	  control();
 8000588:	e7f1      	b.n	800056e <main+0x4a>
 800058a:	bf00      	nop
 800058c:	20000010 	.word	0x20000010
 8000590:	08003c68 	.word	0x08003c68
 8000594:	20000090 	.word	0x20000090
 8000598:	20000000 	.word	0x20000000
 800059c:	20000110 	.word	0x20000110
 80005a0:	200000d0 	.word	0x200000d0

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fec5 	bl	8003342 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000618:	23a8      	movs	r3, #168	; 0xa8
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fda1 	bl	8001170 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f8e6 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fff8 	bl	800164c <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f8cf 	bl	8000804 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	; 0x38
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
 80006a4:	615a      	str	r2, [r3, #20]
 80006a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <MX_TIM3_Init+0xe4>)
 80006aa:	4a2d      	ldr	r2, [pc, #180]	; (8000760 <MX_TIM3_Init+0xe8>)
 80006ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <MX_TIM3_Init+0xe4>)
 80006b0:	2253      	movs	r2, #83	; 0x53
 80006b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b29      	ldr	r3, [pc, #164]	; (800075c <MX_TIM3_Init+0xe4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_TIM3_Init+0xe4>)
 80006bc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80006c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c2:	4b26      	ldr	r3, [pc, #152]	; (800075c <MX_TIM3_Init+0xe4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_TIM3_Init+0xe4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006ce:	4823      	ldr	r0, [pc, #140]	; (800075c <MX_TIM3_Init+0xe4>)
 80006d0:	f001 f9e0 	bl	8001a94 <HAL_TIM_Base_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006da:	f000 f893 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e8:	4619      	mov	r1, r3
 80006ea:	481c      	ldr	r0, [pc, #112]	; (800075c <MX_TIM3_Init+0xe4>)
 80006ec:	f001 fb36 	bl	8001d5c <HAL_TIM_ConfigClockSource>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006f6:	f000 f885 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006fa:	4818      	ldr	r0, [pc, #96]	; (800075c <MX_TIM3_Init+0xe4>)
 80006fc:	f001 f9f5 	bl	8001aea <HAL_TIM_PWM_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000706:	f000 f87d 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <MX_TIM3_Init+0xe4>)
 800071a:	f001 fee7 	bl	80024ec <HAL_TIMEx_MasterConfigSynchronization>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000724:	f000 f86e 	bl	8000804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000728:	2360      	movs	r3, #96	; 0x60
 800072a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <MX_TIM3_Init+0xe4>)
 8000740:	f001 fa46 	bl	8001bd0 <HAL_TIM_PWM_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800074a:	f000 f85b 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <MX_TIM3_Init+0xe4>)
 8000750:	f000 f8a4 	bl	800089c <HAL_TIM_MspPostInit>

}
 8000754:	bf00      	nop
 8000756:	3738      	adds	r7, #56	; 0x38
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000090 	.word	0x20000090
 8000760:	40000400 	.word	0x40000400

08000764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART1_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000770:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800079c:	f001 ff20 	bl	80025e0 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f82d 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000d0 	.word	0x200000d0
 80007b4:	40011000 	.word	0x40011000

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_GPIO_Init+0x48>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <MX_GPIO_Init+0x48>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_GPIO_Init+0x48>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_GPIO_Init+0x48>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <MX_GPIO_Init+0x48>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <MX_GPIO_Init+0x48>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40023800 	.word	0x40023800

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x48>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <HAL_MspInit+0x48>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_MspInit+0x48>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_MspInit+0x48>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_MspInit+0x48>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_MspInit+0x48>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_TIM_Base_MspInit+0x38>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10d      	bne.n	800088a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40000400 	.word	0x40000400
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_TIM_MspPostInit+0x68>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d11d      	bne.n	80008fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_TIM_MspPostInit+0x6c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <HAL_TIM_MspPostInit+0x6c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_TIM_MspPostInit+0x6c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <HAL_TIM_MspPostInit+0x70>)
 80008f6:	f000 faa1 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40000400 	.word	0x40000400
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a19      	ldr	r2, [pc, #100]	; (8000994 <HAL_UART_MspInit+0x84>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d12c      	bne.n	800098c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <HAL_UART_MspInit+0x88>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a10      	ldr	r2, [pc, #64]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800096a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800097c:	2307      	movs	r3, #7
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <HAL_UART_MspInit+0x8c>)
 8000988:	f000 fa58 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	; 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40011000 	.word	0x40011000
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 f929 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	e00a      	b.n	8000a16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a00:	f3af 8000 	nop.w
 8000a04:	4601      	mov	r1, r0
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	1c5a      	adds	r2, r3, #1
 8000a0a:	60ba      	str	r2, [r7, #8]
 8000a0c:	b2ca      	uxtb	r2, r1
 8000a0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	3301      	adds	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dbf0      	blt.n	8000a00 <_read+0x12>
	}

return len;
 8000a1e:	687b      	ldr	r3, [r7, #4]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e009      	b.n	8000a4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	60ba      	str	r2, [r7, #8]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	dbf1      	blt.n	8000a3a <_write+0x12>
	}
	return len;
 8000a56:	687b      	ldr	r3, [r7, #4]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_close>:

int _close(int file)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	return -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
	return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <_isatty>:

int _isatty(int file)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f002 fb8c 	bl	800320c <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	20000114 	.word	0x20000114
 8000b28:	20000130 	.word	0x20000130

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <SystemInit+0x14>)
 8000b32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b36:	609a      	str	r2, [r3, #8]
#endif
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b4a:	e003      	b.n	8000b54 <LoopCopyDataInit>

08000b4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b52:	3104      	adds	r1, #4

08000b54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b5c:	d3f6      	bcc.n	8000b4c <CopyDataInit>
  ldr  r2, =_sbss
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b60:	e002      	b.n	8000b68 <LoopFillZerobss>

08000b62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b64:	f842 3b04 	str.w	r3, [r2], #4

08000b68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b6c:	d3f9      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b6e:	f7ff ffdd 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 fbbf 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fcd5 	bl	8000524 <main>
  bx  lr    
 8000b7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b80:	08003d10 	.word	0x08003d10
  ldr  r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b88:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b8c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b90:	2000012c 	.word	0x2000012c

08000b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <HAL_Init+0x40>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_Init+0x40>)
 8000bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_Init+0x40>)
 8000bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f907 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 f808 	bl	8000bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff fe20 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023c00 	.word	0x40023c00

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x54>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x58>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f911 	bl	8000e22 <HAL_SYSTICK_Config>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00e      	b.n	8000c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d80a      	bhi.n	8000c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 f8e7 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_InitTick+0x5c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000004 	.word	0x20000004
 8000c34:	2000000c 	.word	0x2000000c
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x1c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_IncTick+0x20>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_IncTick+0x20>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	2000000c 	.word	0x2000000c
 8000c5c:	20000118 	.word	0x20000118

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <HAL_GetTick+0x10>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	20000118 	.word	0x20000118

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff90 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff49 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff5e 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff90 	bl	8000d2c <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5f 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffb0 	bl	8000d90 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e16b      	b.n	8001130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 815a 	bne.w	800112a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d00b      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8a:	2b11      	cmp	r3, #17
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d130      	bne.n	8000ef8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0xfc>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80b4 	beq.w	800112a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <HAL_GPIO_Init+0x308>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a5e      	ldr	r2, [pc, #376]	; (8001144 <HAL_GPIO_Init+0x308>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <HAL_GPIO_Init+0x308>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a5a      	ldr	r2, [pc, #360]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a51      	ldr	r2, [pc, #324]	; (800114c <HAL_GPIO_Init+0x310>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d02b      	beq.n	8001062 <HAL_GPIO_Init+0x226>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a50      	ldr	r2, [pc, #320]	; (8001150 <HAL_GPIO_Init+0x314>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x222>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <HAL_GPIO_Init+0x318>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x21e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <HAL_GPIO_Init+0x31c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x21a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <HAL_GPIO_Init+0x320>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x216>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x324>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x212>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_GPIO_Init+0x328>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x20e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <HAL_GPIO_Init+0x32c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x20a>
 8001042:	2307      	movs	r3, #7
 8001044:	e00e      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001046:	2308      	movs	r3, #8
 8001048:	e00c      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104a:	2306      	movs	r3, #6
 800104c:	e00a      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104e:	2305      	movs	r3, #5
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4934      	ldr	r1, [pc, #208]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <HAL_GPIO_Init+0x330>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <HAL_GPIO_Init+0x330>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_GPIO_Init+0x330>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d0:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_GPIO_Init+0x330>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <HAL_GPIO_Init+0x330>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <HAL_GPIO_Init+0x330>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_GPIO_Init+0x330>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_GPIO_Init+0x330>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f ae90 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40021c00 	.word	0x40021c00
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e25e      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118e:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4b85      	ldr	r3, [pc, #532]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4b82      	ldr	r3, [pc, #520]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b7e      	ldr	r3, [pc, #504]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d05b      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d157      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e239      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b76      	ldr	r3, [pc, #472]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a75      	ldr	r2, [pc, #468]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b70      	ldr	r3, [pc, #448]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a6f      	ldr	r2, [pc, #444]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6c      	ldr	r2, [pc, #432]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 8001208:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a68      	ldr	r2, [pc, #416]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a65      	ldr	r2, [pc, #404]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fd1a 	bl	8000c60 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fd16 	bl	8000c60 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1fe      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b5b      	ldr	r3, [pc, #364]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xc0>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fd06 	bl	8000c60 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fd02 	bl	8000c60 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1ea      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001286:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1be      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4937      	ldr	r1, [pc, #220]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_RCC_OscConfig+0x244>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fcbb 	bl	8000c60 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fcb7 	bl	8000c60 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e19f      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4925      	ldr	r1, [pc, #148]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_RCC_OscConfig+0x244>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fc9a 	bl	8000c60 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc96 	bl	8000c60 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e17e      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d036      	beq.n	80013c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d016      	beq.n	8001390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fc7a 	bl	8000c60 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fc76 	bl	8000c60 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e15e      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x200>
 800138e:	e01b      	b.n	80013c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc63 	bl	8000c60 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e00e      	b.n	80013bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fc5f 	bl	8000c60 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d907      	bls.n	80013bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e147      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
 80013b0:	40023800 	.word	0x40023800
 80013b4:	42470000 	.word	0x42470000
 80013b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ea      	bne.n	800139e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8097 	beq.w	8001504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013da:	4b81      	ldr	r3, [pc, #516]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a7c      	ldr	r2, [pc, #496]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b7a      	ldr	r3, [pc, #488]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d118      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001412:	4b74      	ldr	r3, [pc, #464]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a73      	ldr	r2, [pc, #460]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141e:	f7ff fc1f 	bl	8000c60 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7ff fc1b 	bl	8000c60 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e103      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x2ea>
 800144c:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	4a63      	ldr	r2, [pc, #396]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6713      	str	r3, [r2, #112]	; 0x70
 8001458:	e01c      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b05      	cmp	r3, #5
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x30c>
 8001462:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	4a5e      	ldr	r2, [pc, #376]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6713      	str	r3, [r2, #112]	; 0x70
 800146e:	4b5c      	ldr	r3, [pc, #368]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	4a5b      	ldr	r2, [pc, #364]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6713      	str	r3, [r2, #112]	; 0x70
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800147c:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a57      	ldr	r2, [pc, #348]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	4a54      	ldr	r2, [pc, #336]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 0304 	bic.w	r3, r3, #4
 8001492:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d015      	beq.n	80014c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fbe0 	bl	8000c60 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fbdc 	bl	8000c60 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0c2      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ba:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ee      	beq.n	80014a4 <HAL_RCC_OscConfig+0x334>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fbca 	bl	8000c60 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d0:	f7ff fbc6 	bl	8000c60 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	; 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0ac      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e6:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ee      	bne.n	80014d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8098 	beq.w	800163e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d05c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d141      	bne.n	80015a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <HAL_RCC_OscConfig+0x478>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fb9a 	bl	8000c60 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fb96 	bl	8000c60 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e07e      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	3b01      	subs	r3, #1
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	491b      	ldr	r1, [pc, #108]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x478>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fb6f 	bl	8000c60 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fb6b 	bl	8000c60 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e053      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x416>
 80015a4:	e04b      	b.n	800163e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_RCC_OscConfig+0x478>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb58 	bl	8000c60 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb54 	bl	8000c60 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e03c      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
 80015d2:	e034      	b.n	800163e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e02f      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000
 80015e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d11c      	bne.n	800163a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d115      	bne.n	800163a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001614:	4013      	ands	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800161a:	4293      	cmp	r3, r2
 800161c:	d10d      	bne.n	800163a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001636:	429a      	cmp	r2, r3
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0cc      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d90c      	bls.n	8001688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b65      	ldr	r3, [pc, #404]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b63      	ldr	r3, [pc, #396]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0b8      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a0:	4b59      	ldr	r3, [pc, #356]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a58      	ldr	r2, [pc, #352]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a52      	ldr	r2, [pc, #328]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c4:	4b50      	ldr	r3, [pc, #320]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	494d      	ldr	r1, [pc, #308]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d044      	beq.n	800176c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d119      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e07f      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d003      	beq.n	800170a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001706:	2b03      	cmp	r3, #3
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e06f      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e067      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f023 0203 	bic.w	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4934      	ldr	r1, [pc, #208]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	4313      	orrs	r3, r2
 800173a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800173c:	f7ff fa90 	bl	8000c60 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	e00a      	b.n	800175a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7ff fa8c 	bl	8000c60 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e04f      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 020c 	and.w	r2, r3, #12
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	429a      	cmp	r2, r3
 800176a:	d1eb      	bne.n	8001744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d20c      	bcs.n	8001794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e032      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4916      	ldr	r1, [pc, #88]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	490e      	ldr	r1, [pc, #56]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d2:	f000 f821 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	490a      	ldr	r1, [pc, #40]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	5ccb      	ldrb	r3, [r1, r3]
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1c8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff f9f2 	bl	8000bdc <HAL_InitTick>

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00
 8001808:	40023800 	.word	0x40023800
 800180c:	08003c84 	.word	0x08003c84
 8001810:	20000004 	.word	0x20000004
 8001814:	20000008 	.word	0x20000008

08001818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800181c:	b094      	sub	sp, #80	; 0x50
 800181e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	647b      	str	r3, [r7, #68]	; 0x44
 8001824:	2300      	movs	r3, #0
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001828:	2300      	movs	r3, #0
 800182a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001830:	4b7c      	ldr	r3, [pc, #496]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b08      	cmp	r3, #8
 800183a:	d00d      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x40>
 800183c:	2b08      	cmp	r3, #8
 800183e:	f200 80e7 	bhi.w	8001a10 <HAL_RCC_GetSysClockFreq+0x1f8>
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x34>
 8001846:	2b04      	cmp	r3, #4
 8001848:	d003      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x3a>
 800184a:	e0e1      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800184c:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x210>)
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001850:	e0e1      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x214>)
 8001854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001856:	e0de      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001858:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001860:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001862:	4b70      	ldr	r3, [pc, #448]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d065      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186e:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	099b      	lsrs	r3, r3, #6
 8001874:	2200      	movs	r2, #0
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
 8001878:	63fa      	str	r2, [r7, #60]	; 0x3c
 800187a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
 8001882:	2300      	movs	r3, #0
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
 8001886:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800188a:	4622      	mov	r2, r4
 800188c:	462b      	mov	r3, r5
 800188e:	f04f 0000 	mov.w	r0, #0
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	0159      	lsls	r1, r3, #5
 8001898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800189c:	0150      	lsls	r0, r2, #5
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4621      	mov	r1, r4
 80018a4:	1a51      	subs	r1, r2, r1
 80018a6:	6139      	str	r1, [r7, #16]
 80018a8:	4629      	mov	r1, r5
 80018aa:	eb63 0301 	sbc.w	r3, r3, r1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018bc:	4659      	mov	r1, fp
 80018be:	018b      	lsls	r3, r1, #6
 80018c0:	4651      	mov	r1, sl
 80018c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c6:	4651      	mov	r1, sl
 80018c8:	018a      	lsls	r2, r1, #6
 80018ca:	46d4      	mov	ip, sl
 80018cc:	ebb2 080c 	subs.w	r8, r2, ip
 80018d0:	4659      	mov	r1, fp
 80018d2:	eb63 0901 	sbc.w	r9, r3, r1
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ea:	4690      	mov	r8, r2
 80018ec:	4699      	mov	r9, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	eb18 0303 	adds.w	r3, r8, r3
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	462b      	mov	r3, r5
 80018f8:	eb49 0303 	adc.w	r3, r9, r3
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800190a:	4629      	mov	r1, r5
 800190c:	024b      	lsls	r3, r1, #9
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	4604      	mov	r4, r0
 8001914:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001918:	4601      	mov	r1, r0
 800191a:	024a      	lsls	r2, r1, #9
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001922:	2200      	movs	r2, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
 8001926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800192c:	f7fe fc4c 	bl	80001c8 <__aeabi_uldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4613      	mov	r3, r2
 8001936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001938:	e05c      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	2200      	movs	r2, #0
 8001942:	4618      	mov	r0, r3
 8001944:	4611      	mov	r1, r2
 8001946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800194a:	623b      	str	r3, [r7, #32]
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001954:	4642      	mov	r2, r8
 8001956:	464b      	mov	r3, r9
 8001958:	f04f 0000 	mov.w	r0, #0
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	0159      	lsls	r1, r3, #5
 8001962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001966:	0150      	lsls	r0, r2, #5
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	46c4      	mov	ip, r8
 800196e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001972:	4640      	mov	r0, r8
 8001974:	4649      	mov	r1, r9
 8001976:	468c      	mov	ip, r1
 8001978:	eb63 0b0c 	sbc.w	fp, r3, ip
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800198c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001990:	ebb2 040a 	subs.w	r4, r2, sl
 8001994:	eb63 050b 	sbc.w	r5, r3, fp
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	00eb      	lsls	r3, r5, #3
 80019a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019a6:	00e2      	lsls	r2, r4, #3
 80019a8:	4614      	mov	r4, r2
 80019aa:	461d      	mov	r5, r3
 80019ac:	4603      	mov	r3, r0
 80019ae:	18e3      	adds	r3, r4, r3
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	460b      	mov	r3, r1
 80019b4:	eb45 0303 	adc.w	r3, r5, r3
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019c6:	4629      	mov	r1, r5
 80019c8:	028b      	lsls	r3, r1, #10
 80019ca:	4620      	mov	r0, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	4604      	mov	r4, r0
 80019d0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80019d4:	4601      	mov	r1, r0
 80019d6:	028a      	lsls	r2, r1, #10
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019de:	2200      	movs	r2, #0
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	61fa      	str	r2, [r7, #28]
 80019e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019e8:	f7fe fbee 	bl	80001c8 <__aeabi_uldivmod>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4613      	mov	r3, r2
 80019f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x20c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	3301      	adds	r3, #1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a0e:	e002      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x210>)
 8001a12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3750      	adds	r7, #80	; 0x50
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	00f42400 	.word	0x00f42400
 8001a2c:	007a1200 	.word	0x007a1200

08001a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000004 	.word	0x20000004

08001a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a48:	f7ff fff2 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	0a9b      	lsrs	r3, r3, #10
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	4903      	ldr	r1, [pc, #12]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a5a:	5ccb      	ldrb	r3, [r1, r3]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	08003c94 	.word	0x08003c94

08001a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	0b5b      	lsrs	r3, r3, #13
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4903      	ldr	r1, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08003c94 	.word	0x08003c94

08001a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e01d      	b.n	8001ae2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe fece 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f000 fa06 	bl	8001ee4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e01d      	b.n	8001b38 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d106      	bne.n	8001b16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f815 	bl	8001b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f000 f9db 	bl	8001ee4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2201      	movs	r2, #1
 8001b64:	6839      	ldr	r1, [r7, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fc9c 	bl	80024a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_TIM_PWM_Start+0x74>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_TIM_PWM_Start+0x2c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <HAL_TIM_PWM_Start+0x78>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_TIM_PWM_Start+0x30>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_TIM_PWM_Start+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d007      	beq.n	8001bbc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e0b4      	b.n	8001d54 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	f200 809f 	bhi.w	8001d40 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c3d 	.word	0x08001c3d
 8001c0c:	08001d41 	.word	0x08001d41
 8001c10:	08001d41 	.word	0x08001d41
 8001c14:	08001d41 	.word	0x08001d41
 8001c18:	08001c7d 	.word	0x08001c7d
 8001c1c:	08001d41 	.word	0x08001d41
 8001c20:	08001d41 	.word	0x08001d41
 8001c24:	08001d41 	.word	0x08001d41
 8001c28:	08001cbf 	.word	0x08001cbf
 8001c2c:	08001d41 	.word	0x08001d41
 8001c30:	08001d41 	.word	0x08001d41
 8001c34:	08001d41 	.word	0x08001d41
 8001c38:	08001cff 	.word	0x08001cff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f9ec 	bl	8002020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0208 	orr.w	r2, r2, #8
 8001c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0204 	bic.w	r2, r2, #4
 8001c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6999      	ldr	r1, [r3, #24]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	619a      	str	r2, [r3, #24]
      break;
 8001c7a:	e062      	b.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fa3c 	bl	8002100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6999      	ldr	r1, [r3, #24]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	021a      	lsls	r2, r3, #8
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	619a      	str	r2, [r3, #24]
      break;
 8001cbc:	e041      	b.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fa8f 	bl	80021e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0208 	orr.w	r2, r2, #8
 8001cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0204 	bic.w	r2, r2, #4
 8001ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69d9      	ldr	r1, [r3, #28]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	61da      	str	r2, [r3, #28]
      break;
 8001cfc:	e021      	b.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fae3 	bl	80022d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	69d9      	ldr	r1, [r3, #28]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	021a      	lsls	r2, r3, #8
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	61da      	str	r2, [r3, #28]
      break;
 8001d3e:	e000      	b.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001d40:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_TIM_ConfigClockSource+0x18>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e0b3      	b.n	8001edc <HAL_TIM_ConfigClockSource+0x180>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dac:	d03e      	beq.n	8001e2c <HAL_TIM_ConfigClockSource+0xd0>
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	f200 8087 	bhi.w	8001ec4 <HAL_TIM_ConfigClockSource+0x168>
 8001db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dba:	f000 8085 	beq.w	8001ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc2:	d87f      	bhi.n	8001ec4 <HAL_TIM_ConfigClockSource+0x168>
 8001dc4:	2b70      	cmp	r3, #112	; 0x70
 8001dc6:	d01a      	beq.n	8001dfe <HAL_TIM_ConfigClockSource+0xa2>
 8001dc8:	2b70      	cmp	r3, #112	; 0x70
 8001dca:	d87b      	bhi.n	8001ec4 <HAL_TIM_ConfigClockSource+0x168>
 8001dcc:	2b60      	cmp	r3, #96	; 0x60
 8001dce:	d050      	beq.n	8001e72 <HAL_TIM_ConfigClockSource+0x116>
 8001dd0:	2b60      	cmp	r3, #96	; 0x60
 8001dd2:	d877      	bhi.n	8001ec4 <HAL_TIM_ConfigClockSource+0x168>
 8001dd4:	2b50      	cmp	r3, #80	; 0x50
 8001dd6:	d03c      	beq.n	8001e52 <HAL_TIM_ConfigClockSource+0xf6>
 8001dd8:	2b50      	cmp	r3, #80	; 0x50
 8001dda:	d873      	bhi.n	8001ec4 <HAL_TIM_ConfigClockSource+0x168>
 8001ddc:	2b40      	cmp	r3, #64	; 0x40
 8001dde:	d058      	beq.n	8001e92 <HAL_TIM_ConfigClockSource+0x136>
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d86f      	bhi.n	8001ec4 <HAL_TIM_ConfigClockSource+0x168>
 8001de4:	2b30      	cmp	r3, #48	; 0x30
 8001de6:	d064      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0x156>
 8001de8:	2b30      	cmp	r3, #48	; 0x30
 8001dea:	d86b      	bhi.n	8001ec4 <HAL_TIM_ConfigClockSource+0x168>
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d060      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0x156>
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d867      	bhi.n	8001ec4 <HAL_TIM_ConfigClockSource+0x168>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d05c      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0x156>
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d05a      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001dfc:	e062      	b.n	8001ec4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6899      	ldr	r1, [r3, #8]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f000 fb2a 	bl	8002466 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	609a      	str	r2, [r3, #8]
      break;
 8001e2a:	e04e      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f000 fb13 	bl	8002466 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e4e:	609a      	str	r2, [r3, #8]
      break;
 8001e50:	e03b      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6859      	ldr	r1, [r3, #4]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f000 fa8a 	bl	8002378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2150      	movs	r1, #80	; 0x50
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fae1 	bl	8002432 <TIM_ITRx_SetConfig>
      break;
 8001e70:	e02b      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f000 faa8 	bl	80023d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2160      	movs	r1, #96	; 0x60
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fad1 	bl	8002432 <TIM_ITRx_SetConfig>
      break;
 8001e90:	e01b      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f000 fa6a 	bl	8002378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2140      	movs	r1, #64	; 0x40
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fac1 	bl	8002432 <TIM_ITRx_SetConfig>
      break;
 8001eb0:	e00b      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f000 fab8 	bl	8002432 <TIM_ITRx_SetConfig>
      break;
 8001ec2:	e002      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ec4:	bf00      	nop
 8001ec6:	e000      	b.n	8001eca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ec8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3f      	ldr	r2, [pc, #252]	; (8001ff4 <TIM_Base_SetConfig+0x110>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f02:	d00f      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3c      	ldr	r2, [pc, #240]	; (8001ff8 <TIM_Base_SetConfig+0x114>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00b      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <TIM_Base_SetConfig+0x118>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <TIM_Base_SetConfig+0x11c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a39      	ldr	r2, [pc, #228]	; (8002004 <TIM_Base_SetConfig+0x120>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d108      	bne.n	8001f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <TIM_Base_SetConfig+0x110>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d02b      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d027      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <TIM_Base_SetConfig+0x114>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d023      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <TIM_Base_SetConfig+0x118>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01f      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <TIM_Base_SetConfig+0x11c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01b      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a28      	ldr	r2, [pc, #160]	; (8002004 <TIM_Base_SetConfig+0x120>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d017      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a27      	ldr	r2, [pc, #156]	; (8002008 <TIM_Base_SetConfig+0x124>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <TIM_Base_SetConfig+0x128>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00f      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <TIM_Base_SetConfig+0x12c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00b      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <TIM_Base_SetConfig+0x130>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a23      	ldr	r2, [pc, #140]	; (8002018 <TIM_Base_SetConfig+0x134>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a22      	ldr	r2, [pc, #136]	; (800201c <TIM_Base_SetConfig+0x138>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d108      	bne.n	8001fa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <TIM_Base_SetConfig+0x110>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d003      	beq.n	8001fdc <TIM_Base_SetConfig+0xf8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <TIM_Base_SetConfig+0x120>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d103      	bne.n	8001fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	615a      	str	r2, [r3, #20]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40000800 	.word	0x40000800
 8002000:	40000c00 	.word	0x40000c00
 8002004:	40010400 	.word	0x40010400
 8002008:	40014000 	.word	0x40014000
 800200c:	40014400 	.word	0x40014400
 8002010:	40014800 	.word	0x40014800
 8002014:	40001800 	.word	0x40001800
 8002018:	40001c00 	.word	0x40001c00
 800201c:	40002000 	.word	0x40002000

08002020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	f023 0201 	bic.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f023 0302 	bic.w	r3, r3, #2
 8002068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <TIM_OC1_SetConfig+0xd8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_OC1_SetConfig+0x64>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <TIM_OC1_SetConfig+0xdc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d10c      	bne.n	800209e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f023 0308 	bic.w	r3, r3, #8
 800208a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <TIM_OC1_SetConfig+0xd8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_OC1_SetConfig+0x8e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <TIM_OC1_SetConfig+0xdc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d111      	bne.n	80020d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	621a      	str	r2, [r3, #32]
}
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40010400 	.word	0x40010400

08002100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	f023 0210 	bic.w	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f023 0320 	bic.w	r3, r3, #32
 800214a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <TIM_OC2_SetConfig+0xe0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d003      	beq.n	8002168 <TIM_OC2_SetConfig+0x68>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a20      	ldr	r2, [pc, #128]	; (80021e4 <TIM_OC2_SetConfig+0xe4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d10d      	bne.n	8002184 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800216e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002182:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <TIM_OC2_SetConfig+0xe0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_OC2_SetConfig+0x94>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <TIM_OC2_SetConfig+0xe4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d113      	bne.n	80021bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800219a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	621a      	str	r2, [r3, #32]
}
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40010400 	.word	0x40010400

080021e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <TIM_OC3_SetConfig+0xe0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d003      	beq.n	800224e <TIM_OC3_SetConfig+0x66>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a20      	ldr	r2, [pc, #128]	; (80022cc <TIM_OC3_SetConfig+0xe4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10d      	bne.n	800226a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <TIM_OC3_SetConfig+0xe0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d003      	beq.n	800227a <TIM_OC3_SetConfig+0x92>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a15      	ldr	r2, [pc, #84]	; (80022cc <TIM_OC3_SetConfig+0xe4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d113      	bne.n	80022a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	621a      	str	r2, [r3, #32]
}
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40010400 	.word	0x40010400

080022d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800231a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	031b      	lsls	r3, r3, #12
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <TIM_OC4_SetConfig+0xa0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d003      	beq.n	8002338 <TIM_OC4_SetConfig+0x68>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <TIM_OC4_SetConfig+0xa4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d109      	bne.n	800234c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800233e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	019b      	lsls	r3, r3, #6
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	621a      	str	r2, [r3, #32]
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	40010000 	.word	0x40010000
 8002374:	40010400 	.word	0x40010400

08002378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f023 0201 	bic.w	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f023 030a 	bic.w	r3, r3, #10
 80023b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	621a      	str	r2, [r3, #32]
}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f023 0210 	bic.w	r2, r3, #16
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	031b      	lsls	r3, r3, #12
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002410:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	621a      	str	r2, [r3, #32]
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	f043 0307 	orr.w	r3, r3, #7
 8002454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	609a      	str	r2, [r3, #8]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002466:	b480      	push	{r7}
 8002468:	b087      	sub	sp, #28
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002480:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	021a      	lsls	r2, r3, #8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	431a      	orrs	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4313      	orrs	r3, r2
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	609a      	str	r2, [r3, #8]
}
 800249a:	bf00      	nop
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2201      	movs	r2, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1a      	ldr	r2, [r3, #32]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	431a      	orrs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002500:	2302      	movs	r3, #2
 8002502:	e05a      	b.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d022      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002550:	d01d      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d018      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00e      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d009      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a16      	ldr	r2, [pc, #88]	; (80025d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d004      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d10c      	bne.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4313      	orrs	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40010400 	.word	0x40010400
 80025d8:	40014000 	.word	0x40014000
 80025dc:	40001800 	.word	0x40001800

080025e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e03f      	b.n	8002672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe f982 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f919 	bl	800285c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b088      	sub	sp, #32
 800267e:	af02      	add	r7, sp, #8
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	f040 8090 	bne.w	80027bc <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_UART_Receive+0x2e>
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e088      	b.n	80027be <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_UART_Receive+0x40>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e081      	b.n	80027be <HAL_UART_Receive+0x144>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2222      	movs	r2, #34	; 0x22
 80026cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80026d0:	f7fe fac6 	bl	8000c60 <HAL_GetTick>
 80026d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	88fa      	ldrh	r2, [r7, #6]
 80026da:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026ea:	e05c      	b.n	80027a6 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	d12b      	bne.n	800275c <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2200      	movs	r2, #0
 800270c:	2120      	movs	r1, #32
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f859 	bl	80027c6 <UART_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e04f      	b.n	80027be <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002736:	b29a      	uxth	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3302      	adds	r3, #2
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	e030      	b.n	80027a6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	b29b      	uxth	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	b29a      	uxth	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3301      	adds	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	e024      	b.n	80027a6 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2200      	movs	r2, #0
 8002764:	2120      	movs	r1, #32
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f82d 	bl	80027c6 <UART_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e023      	b.n	80027be <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d108      	bne.n	8002790 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	60ba      	str	r2, [r7, #8]
 800278a:	b2ca      	uxtb	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e00a      	b.n	80027a6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	1c59      	adds	r1, r3, #1
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d19d      	bne.n	80026ec <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d6:	e02c      	b.n	8002832 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d028      	beq.n	8002832 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80027e6:	f7fe fa3b 	bl	8000c60 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d21d      	bcs.n	8002832 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002804:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e00f      	b.n	8002852 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4013      	ands	r3, r2
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	bf0c      	ite	eq
 8002842:	2301      	moveq	r3, #1
 8002844:	2300      	movne	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	429a      	cmp	r2, r3
 800284e:	d0c3      	beq.n	80027d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800285c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002860:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002864:	af00      	add	r7, sp, #0
 8002866:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800286a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002876:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800287a:	68d9      	ldr	r1, [r3, #12]
 800287c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	ea40 0301 	orr.w	r3, r0, r1
 8002886:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002888:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
 8002896:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	431a      	orrs	r2, r3
 800289e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80028aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028b6:	f021 010c 	bic.w	r1, r1, #12
 80028ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80028c4:	430b      	orrs	r3, r1
 80028c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028d8:	6999      	ldr	r1, [r3, #24]
 80028da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	ea40 0301 	orr.w	r3, r0, r1
 80028e4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	f040 824c 	bne.w	8002d8c <UART_SetConfig+0x530>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b96      	ldr	r3, [pc, #600]	; (8002b54 <UART_SetConfig+0x2f8>)
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d006      	beq.n	800290e <UART_SetConfig+0xb2>
 8002900:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b94      	ldr	r3, [pc, #592]	; (8002b58 <UART_SetConfig+0x2fc>)
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 8129 	bne.w	8002b60 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800290e:	f7ff f8ad 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8002912:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002916:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800291a:	2200      	movs	r2, #0
 800291c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8002920:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8002924:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8002928:	4622      	mov	r2, r4
 800292a:	462b      	mov	r3, r5
 800292c:	1891      	adds	r1, r2, r2
 800292e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002932:	415b      	adcs	r3, r3
 8002934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002938:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800293c:	4621      	mov	r1, r4
 800293e:	1851      	adds	r1, r2, r1
 8002940:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8002944:	4629      	mov	r1, r5
 8002946:	414b      	adcs	r3, r1
 8002948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8002958:	4649      	mov	r1, r9
 800295a:	00cb      	lsls	r3, r1, #3
 800295c:	46c4      	mov	ip, r8
 800295e:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8002962:	4641      	mov	r1, r8
 8002964:	00ca      	lsls	r2, r1, #3
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	4603      	mov	r3, r0
 800296c:	4622      	mov	r2, r4
 800296e:	189b      	adds	r3, r3, r2
 8002970:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002974:	462b      	mov	r3, r5
 8002976:	460a      	mov	r2, r1
 8002978:	eb42 0303 	adc.w	r3, r2, r3
 800297c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8002980:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800298c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8002990:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8002994:	460b      	mov	r3, r1
 8002996:	18db      	adds	r3, r3, r3
 8002998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800299c:	4613      	mov	r3, r2
 800299e:	eb42 0303 	adc.w	r3, r2, r3
 80029a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029a6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80029aa:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80029ae:	f7fd fc0b 	bl	80001c8 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4b69      	ldr	r3, [pc, #420]	; (8002b5c <UART_SetConfig+0x300>)
 80029b8:	fba3 2302 	umull	r2, r3, r3, r2
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	011c      	lsls	r4, r3, #4
 80029c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80029ca:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80029ce:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80029d2:	4642      	mov	r2, r8
 80029d4:	464b      	mov	r3, r9
 80029d6:	1891      	adds	r1, r2, r2
 80029d8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80029dc:	415b      	adcs	r3, r3
 80029de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80029e2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80029e6:	4641      	mov	r1, r8
 80029e8:	1851      	adds	r1, r2, r1
 80029ea:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80029ee:	4649      	mov	r1, r9
 80029f0:	414b      	adcs	r3, r1
 80029f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8002a02:	4659      	mov	r1, fp
 8002a04:	00cb      	lsls	r3, r1, #3
 8002a06:	4655      	mov	r5, sl
 8002a08:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	00ca      	lsls	r2, r1, #3
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	4603      	mov	r3, r0
 8002a16:	4642      	mov	r2, r8
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002a1e:	464b      	mov	r3, r9
 8002a20:	460a      	mov	r2, r1
 8002a22:	eb42 0303 	adc.w	r3, r2, r3
 8002a26:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002a2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002a36:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8002a3a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8002a3e:	460b      	mov	r3, r1
 8002a40:	18db      	adds	r3, r3, r3
 8002a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a46:	4613      	mov	r3, r2
 8002a48:	eb42 0303 	adc.w	r3, r2, r3
 8002a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a50:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002a54:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8002a58:	f7fd fbb6 	bl	80001c8 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4611      	mov	r1, r2
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <UART_SetConfig+0x300>)
 8002a64:	fba3 2301 	umull	r2, r3, r3, r1
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	2264      	movs	r2, #100	; 0x64
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	1acb      	subs	r3, r1, r3
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a78:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <UART_SetConfig+0x300>)
 8002a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a86:	441c      	add	r4, r3
 8002a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a92:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8002a96:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8002a9a:	4642      	mov	r2, r8
 8002a9c:	464b      	mov	r3, r9
 8002a9e:	1891      	adds	r1, r2, r2
 8002aa0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8002aa4:	415b      	adcs	r3, r3
 8002aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002aaa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002aae:	4641      	mov	r1, r8
 8002ab0:	1851      	adds	r1, r2, r1
 8002ab2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	414b      	adcs	r3, r1
 8002aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8002aca:	4659      	mov	r1, fp
 8002acc:	00cb      	lsls	r3, r1, #3
 8002ace:	4655      	mov	r5, sl
 8002ad0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	00ca      	lsls	r2, r1, #3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	4603      	mov	r3, r0
 8002ade:	4642      	mov	r2, r8
 8002ae0:	189b      	adds	r3, r3, r2
 8002ae2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	460a      	mov	r2, r1
 8002aea:	eb42 0303 	adc.w	r3, r2, r3
 8002aee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002af2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002afe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8002b02:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8002b06:	460b      	mov	r3, r1
 8002b08:	18db      	adds	r3, r3, r3
 8002b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b0e:	4613      	mov	r3, r2
 8002b10:	eb42 0303 	adc.w	r3, r2, r3
 8002b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b18:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002b1c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8002b20:	f7fd fb52 	bl	80001c8 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <UART_SetConfig+0x300>)
 8002b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2164      	movs	r1, #100	; 0x64
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	3332      	adds	r3, #50	; 0x32
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <UART_SetConfig+0x300>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	f003 0207 	and.w	r2, r3, #7
 8002b48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4422      	add	r2, r4
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	e353      	b.n	80031fc <UART_SetConfig+0x9a0>
 8002b54:	40011000 	.word	0x40011000
 8002b58:	40011400 	.word	0x40011400
 8002b5c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b60:	f7fe ff70 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8002b64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002b72:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8002b76:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8002b7a:	4622      	mov	r2, r4
 8002b7c:	462b      	mov	r3, r5
 8002b7e:	1891      	adds	r1, r2, r2
 8002b80:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002b84:	415b      	adcs	r3, r3
 8002b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b8a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b8e:	4620      	mov	r0, r4
 8002b90:	4629      	mov	r1, r5
 8002b92:	4604      	mov	r4, r0
 8002b94:	eb12 0a04 	adds.w	sl, r2, r4
 8002b98:	460c      	mov	r4, r1
 8002b9a:	eb43 0b04 	adc.w	fp, r3, r4
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002baa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb2:	4692      	mov	sl, r2
 8002bb4:	469b      	mov	fp, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	eb1a 0303 	adds.w	r3, sl, r3
 8002bbc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002bd6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002bda:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8002bde:	460b      	mov	r3, r1
 8002be0:	18db      	adds	r3, r3, r3
 8002be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002be6:	4613      	mov	r3, r2
 8002be8:	eb42 0303 	adc.w	r3, r2, r3
 8002bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bf0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002bf4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8002bf8:	f7fd fae6 	bl	80001c8 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <UART_SetConfig+0x52c>)
 8002c02:	fba3 2302 	umull	r2, r3, r3, r2
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	011c      	lsls	r4, r3, #4
 8002c0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002c14:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8002c18:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	464b      	mov	r3, r9
 8002c20:	1891      	adds	r1, r2, r2
 8002c22:	67b9      	str	r1, [r7, #120]	; 0x78
 8002c24:	415b      	adcs	r3, r3
 8002c26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c28:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	1851      	adds	r1, r2, r1
 8002c30:	6739      	str	r1, [r7, #112]	; 0x70
 8002c32:	4649      	mov	r1, r9
 8002c34:	414b      	adcs	r3, r1
 8002c36:	677b      	str	r3, [r7, #116]	; 0x74
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8002c44:	4659      	mov	r1, fp
 8002c46:	00cb      	lsls	r3, r1, #3
 8002c48:	4655      	mov	r5, sl
 8002c4a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002c4e:	4651      	mov	r1, sl
 8002c50:	00ca      	lsls	r2, r1, #3
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	4642      	mov	r2, r8
 8002c5a:	189b      	adds	r3, r3, r2
 8002c5c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002c60:	464b      	mov	r3, r9
 8002c62:	460a      	mov	r2, r1
 8002c64:	eb42 0303 	adc.w	r3, r2, r3
 8002c68:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002c6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c78:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8002c7c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8002c80:	460b      	mov	r3, r1
 8002c82:	18db      	adds	r3, r3, r3
 8002c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c86:	4613      	mov	r3, r2
 8002c88:	eb42 0303 	adc.w	r3, r2, r3
 8002c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c8e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002c92:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c96:	f7fd fa97 	bl	80001c8 <__aeabi_uldivmod>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <UART_SetConfig+0x52c>)
 8002ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2264      	movs	r2, #100	; 0x64
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	1acb      	subs	r3, r1, r3
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cb6:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <UART_SetConfig+0x52c>)
 8002cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cc4:	441c      	add	r4, r3
 8002cc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8002cd0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002cd4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8002cd8:	4642      	mov	r2, r8
 8002cda:	464b      	mov	r3, r9
 8002cdc:	1891      	adds	r1, r2, r2
 8002cde:	6639      	str	r1, [r7, #96]	; 0x60
 8002ce0:	415b      	adcs	r3, r3
 8002ce2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ce4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ce8:	4641      	mov	r1, r8
 8002cea:	1851      	adds	r1, r2, r1
 8002cec:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cee:	4649      	mov	r1, r9
 8002cf0:	414b      	adcs	r3, r1
 8002cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8002d00:	4659      	mov	r1, fp
 8002d02:	00cb      	lsls	r3, r1, #3
 8002d04:	4655      	mov	r5, sl
 8002d06:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	00ca      	lsls	r2, r1, #3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	4642      	mov	r2, r8
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	460a      	mov	r2, r1
 8002d20:	eb42 0303 	adc.w	r3, r2, r3
 8002d24:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002d28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002d34:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8002d38:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	18db      	adds	r3, r3, r3
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
 8002d42:	4613      	mov	r3, r2
 8002d44:	eb42 0303 	adc.w	r3, r2, r3
 8002d48:	657b      	str	r3, [r7, #84]	; 0x54
 8002d4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d4e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002d52:	f7fd fa39 	bl	80001c8 <__aeabi_uldivmod>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <UART_SetConfig+0x52c>)
 8002d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	2164      	movs	r1, #100	; 0x64
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	3332      	adds	r3, #50	; 0x32
 8002d6e:	4a06      	ldr	r2, [pc, #24]	; (8002d88 <UART_SetConfig+0x52c>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	f003 0207 	and.w	r2, r3, #7
 8002d7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4422      	add	r2, r4
 8002d82:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d84:	e23a      	b.n	80031fc <UART_SetConfig+0x9a0>
 8002d86:	bf00      	nop
 8002d88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b8f      	ldr	r3, [pc, #572]	; (8002fd0 <UART_SetConfig+0x774>)
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d006      	beq.n	8002da6 <UART_SetConfig+0x54a>
 8002d98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b8d      	ldr	r3, [pc, #564]	; (8002fd4 <UART_SetConfig+0x778>)
 8002da0:	429a      	cmp	r2, r3
 8002da2:	f040 811b 	bne.w	8002fdc <UART_SetConfig+0x780>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002da6:	f7fe fe61 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8002daa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002db8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002dbc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002dc0:	4622      	mov	r2, r4
 8002dc2:	462b      	mov	r3, r5
 8002dc4:	1891      	adds	r1, r2, r2
 8002dc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002dc8:	415b      	adcs	r3, r3
 8002dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	eb12 0804 	adds.w	r8, r2, r4
 8002dda:	460c      	mov	r4, r1
 8002ddc:	eb43 0904 	adc.w	r9, r3, r4
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002df0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002df4:	4690      	mov	r8, r2
 8002df6:	4699      	mov	r9, r3
 8002df8:	4603      	mov	r3, r0
 8002dfa:	eb18 0303 	adds.w	r3, r8, r3
 8002dfe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002e02:	460b      	mov	r3, r1
 8002e04:	eb49 0303 	adc.w	r3, r9, r3
 8002e08:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002e0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e18:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8002e28:	4629      	mov	r1, r5
 8002e2a:	008b      	lsls	r3, r1, #2
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	4629      	mov	r1, r5
 8002e30:	4604      	mov	r4, r0
 8002e32:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002e36:	4601      	mov	r1, r0
 8002e38:	008a      	lsls	r2, r1, #2
 8002e3a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8002e3e:	f7fd f9c3 	bl	80001c8 <__aeabi_uldivmod>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4b64      	ldr	r3, [pc, #400]	; (8002fd8 <UART_SetConfig+0x77c>)
 8002e48:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	011c      	lsls	r4, r3, #4
 8002e50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002e5a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002e5e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8002e62:	4642      	mov	r2, r8
 8002e64:	464b      	mov	r3, r9
 8002e66:	1891      	adds	r1, r2, r2
 8002e68:	6439      	str	r1, [r7, #64]	; 0x40
 8002e6a:	415b      	adcs	r3, r3
 8002e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e72:	4641      	mov	r1, r8
 8002e74:	1851      	adds	r1, r2, r1
 8002e76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e78:	4649      	mov	r1, r9
 8002e7a:	414b      	adcs	r3, r1
 8002e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8002e8a:	4659      	mov	r1, fp
 8002e8c:	00cb      	lsls	r3, r1, #3
 8002e8e:	4655      	mov	r5, sl
 8002e90:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002e94:	4651      	mov	r1, sl
 8002e96:	00ca      	lsls	r2, r1, #3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4642      	mov	r2, r8
 8002ea0:	189b      	adds	r3, r3, r2
 8002ea2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	eb42 0303 	adc.w	r3, r2, r3
 8002eae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002eb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002ebe:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8002ece:	4649      	mov	r1, r9
 8002ed0:	008b      	lsls	r3, r1, #2
 8002ed2:	4645      	mov	r5, r8
 8002ed4:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8002ed8:	4641      	mov	r1, r8
 8002eda:	008a      	lsls	r2, r1, #2
 8002edc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002ee0:	f7fd f972 	bl	80001c8 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <UART_SetConfig+0x77c>)
 8002eea:	fba3 1302 	umull	r1, r3, r3, r2
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2164      	movs	r1, #100	; 0x64
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	3332      	adds	r3, #50	; 0x32
 8002efc:	4a36      	ldr	r2, [pc, #216]	; (8002fd8 <UART_SetConfig+0x77c>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f08:	441c      	add	r4, r3
 8002f0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002f14:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8002f18:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	1891      	adds	r1, r2, r2
 8002f22:	6339      	str	r1, [r7, #48]	; 0x30
 8002f24:	415b      	adcs	r3, r3
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
 8002f28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	1851      	adds	r1, r2, r1
 8002f30:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f32:	4649      	mov	r1, r9
 8002f34:	414b      	adcs	r3, r1
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8002f44:	4659      	mov	r1, fp
 8002f46:	00cb      	lsls	r3, r1, #3
 8002f48:	4655      	mov	r5, sl
 8002f4a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002f4e:	4651      	mov	r1, sl
 8002f50:	00ca      	lsls	r2, r1, #3
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	4642      	mov	r2, r8
 8002f5a:	189b      	adds	r3, r3, r2
 8002f5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002f60:	464b      	mov	r3, r9
 8002f62:	460a      	mov	r2, r1
 8002f64:	eb42 0303 	adc.w	r3, r2, r3
 8002f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002f6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f78:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8002f88:	4649      	mov	r1, r9
 8002f8a:	008b      	lsls	r3, r1, #2
 8002f8c:	4645      	mov	r5, r8
 8002f8e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8002f92:	4641      	mov	r1, r8
 8002f94:	008a      	lsls	r2, r1, #2
 8002f96:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002f9a:	f7fd f915 	bl	80001c8 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <UART_SetConfig+0x77c>)
 8002fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	2164      	movs	r1, #100	; 0x64
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	3332      	adds	r3, #50	; 0x32
 8002fb6:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <UART_SetConfig+0x77c>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4422      	add	r2, r4
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	e116      	b.n	80031fc <UART_SetConfig+0x9a0>
 8002fce:	bf00      	nop
 8002fd0:	40011000 	.word	0x40011000
 8002fd4:	40011400 	.word	0x40011400
 8002fd8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7fe fd32 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fe4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002fee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002ff2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8002ff6:	4642      	mov	r2, r8
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	1891      	adds	r1, r2, r2
 8002ffc:	6239      	str	r1, [r7, #32]
 8002ffe:	415b      	adcs	r3, r3
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003006:	4641      	mov	r1, r8
 8003008:	1854      	adds	r4, r2, r1
 800300a:	46cc      	mov	ip, r9
 800300c:	eb43 050c 	adc.w	r5, r3, ip
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	00eb      	lsls	r3, r5, #3
 800301a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800301e:	00e2      	lsls	r2, r4, #3
 8003020:	4614      	mov	r4, r2
 8003022:	461d      	mov	r5, r3
 8003024:	4640      	mov	r0, r8
 8003026:	4649      	mov	r1, r9
 8003028:	4603      	mov	r3, r0
 800302a:	18e3      	adds	r3, r4, r3
 800302c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003030:	460b      	mov	r3, r1
 8003032:	eb45 0303 	adc.w	r3, r5, r3
 8003036:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800303a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003046:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003056:	4629      	mov	r1, r5
 8003058:	008b      	lsls	r3, r1, #2
 800305a:	4620      	mov	r0, r4
 800305c:	4629      	mov	r1, r5
 800305e:	4604      	mov	r4, r0
 8003060:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003064:	4601      	mov	r1, r0
 8003066:	008a      	lsls	r2, r1, #2
 8003068:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800306c:	f7fd f8ac 	bl	80001c8 <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4b64      	ldr	r3, [pc, #400]	; (8003208 <UART_SetConfig+0x9ac>)
 8003076:	fba3 2302 	umull	r2, r3, r3, r2
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	011c      	lsls	r4, r3, #4
 800307e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003082:	2200      	movs	r2, #0
 8003084:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003088:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800308c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8003090:	4642      	mov	r2, r8
 8003092:	464b      	mov	r3, r9
 8003094:	1891      	adds	r1, r2, r2
 8003096:	61b9      	str	r1, [r7, #24]
 8003098:	415b      	adcs	r3, r3
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a0:	4641      	mov	r1, r8
 80030a2:	1851      	adds	r1, r2, r1
 80030a4:	6139      	str	r1, [r7, #16]
 80030a6:	4649      	mov	r1, r9
 80030a8:	414b      	adcs	r3, r1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030b8:	4659      	mov	r1, fp
 80030ba:	00cb      	lsls	r3, r1, #3
 80030bc:	4655      	mov	r5, sl
 80030be:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80030c2:	4651      	mov	r1, sl
 80030c4:	00ca      	lsls	r2, r1, #3
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	4642      	mov	r2, r8
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80030d4:	464b      	mov	r3, r9
 80030d6:	460a      	mov	r2, r1
 80030d8:	eb42 0303 	adc.w	r3, r2, r3
 80030dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80030e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80030ec:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80030fc:	4649      	mov	r1, r9
 80030fe:	008b      	lsls	r3, r1, #2
 8003100:	4645      	mov	r5, r8
 8003102:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003106:	4641      	mov	r1, r8
 8003108:	008a      	lsls	r2, r1, #2
 800310a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800310e:	f7fd f85b 	bl	80001c8 <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <UART_SetConfig+0x9ac>)
 8003118:	fba3 1302 	umull	r1, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	2164      	movs	r1, #100	; 0x64
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	3332      	adds	r3, #50	; 0x32
 800312a:	4a37      	ldr	r2, [pc, #220]	; (8003208 <UART_SetConfig+0x9ac>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003136:	441c      	add	r4, r3
 8003138:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003142:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003146:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800314a:	4642      	mov	r2, r8
 800314c:	464b      	mov	r3, r9
 800314e:	1891      	adds	r1, r2, r2
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	415b      	adcs	r3, r3
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800315a:	4641      	mov	r1, r8
 800315c:	1851      	adds	r1, r2, r1
 800315e:	6039      	str	r1, [r7, #0]
 8003160:	4649      	mov	r1, r9
 8003162:	414b      	adcs	r3, r1
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003172:	4659      	mov	r1, fp
 8003174:	00cb      	lsls	r3, r1, #3
 8003176:	4655      	mov	r5, sl
 8003178:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800317c:	4651      	mov	r1, sl
 800317e:	00ca      	lsls	r2, r1, #3
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	4603      	mov	r3, r0
 8003186:	4642      	mov	r2, r8
 8003188:	189b      	adds	r3, r3, r2
 800318a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800318e:	464b      	mov	r3, r9
 8003190:	460a      	mov	r2, r1
 8003192:	eb42 0303 	adc.w	r3, r2, r3
 8003196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800319a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80031b6:	4649      	mov	r1, r9
 80031b8:	008b      	lsls	r3, r1, #2
 80031ba:	4645      	mov	r5, r8
 80031bc:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80031c0:	4641      	mov	r1, r8
 80031c2:	008a      	lsls	r2, r1, #2
 80031c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031c8:	f7fc fffe 	bl	80001c8 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <UART_SetConfig+0x9ac>)
 80031d2:	fba3 1302 	umull	r1, r3, r3, r2
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2164      	movs	r1, #100	; 0x64
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	3332      	adds	r3, #50	; 0x32
 80031e4:	4a08      	ldr	r2, [pc, #32]	; (8003208 <UART_SetConfig+0x9ac>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4422      	add	r2, r4
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	e7ff      	b.n	80031fc <UART_SetConfig+0x9a0>
 80031fc:	bf00      	nop
 80031fe:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003202:	46bd      	mov	sp, r7
 8003204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003208:	51eb851f 	.word	0x51eb851f

0800320c <__errno>:
 800320c:	4b01      	ldr	r3, [pc, #4]	; (8003214 <__errno+0x8>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000010 	.word	0x20000010

08003218 <_fwrite_r>:
 8003218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800321c:	9c08      	ldr	r4, [sp, #32]
 800321e:	468a      	mov	sl, r1
 8003220:	4690      	mov	r8, r2
 8003222:	fb02 f903 	mul.w	r9, r2, r3
 8003226:	4605      	mov	r5, r0
 8003228:	b118      	cbz	r0, 8003232 <_fwrite_r+0x1a>
 800322a:	6983      	ldr	r3, [r0, #24]
 800322c:	b90b      	cbnz	r3, 8003232 <_fwrite_r+0x1a>
 800322e:	f000 fa67 	bl	8003700 <__sinit>
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <_fwrite_r+0xb4>)
 8003234:	429c      	cmp	r4, r3
 8003236:	d123      	bne.n	8003280 <_fwrite_r+0x68>
 8003238:	686c      	ldr	r4, [r5, #4]
 800323a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800323c:	07de      	lsls	r6, r3, #31
 800323e:	d405      	bmi.n	800324c <_fwrite_r+0x34>
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	0598      	lsls	r0, r3, #22
 8003244:	d402      	bmi.n	800324c <_fwrite_r+0x34>
 8003246:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003248:	f000 f879 	bl	800333e <__retarget_lock_acquire_recursive>
 800324c:	89a3      	ldrh	r3, [r4, #12]
 800324e:	0719      	lsls	r1, r3, #28
 8003250:	d520      	bpl.n	8003294 <_fwrite_r+0x7c>
 8003252:	6923      	ldr	r3, [r4, #16]
 8003254:	b1f3      	cbz	r3, 8003294 <_fwrite_r+0x7c>
 8003256:	2600      	movs	r6, #0
 8003258:	454e      	cmp	r6, r9
 800325a:	d029      	beq.n	80032b0 <_fwrite_r+0x98>
 800325c:	68a7      	ldr	r7, [r4, #8]
 800325e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8003262:	3f01      	subs	r7, #1
 8003264:	2f00      	cmp	r7, #0
 8003266:	60a7      	str	r7, [r4, #8]
 8003268:	da04      	bge.n	8003274 <_fwrite_r+0x5c>
 800326a:	69a3      	ldr	r3, [r4, #24]
 800326c:	429f      	cmp	r7, r3
 800326e:	db19      	blt.n	80032a4 <_fwrite_r+0x8c>
 8003270:	290a      	cmp	r1, #10
 8003272:	d017      	beq.n	80032a4 <_fwrite_r+0x8c>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	6022      	str	r2, [r4, #0]
 800327a:	7019      	strb	r1, [r3, #0]
 800327c:	3601      	adds	r6, #1
 800327e:	e7eb      	b.n	8003258 <_fwrite_r+0x40>
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <_fwrite_r+0xb8>)
 8003282:	429c      	cmp	r4, r3
 8003284:	d101      	bne.n	800328a <_fwrite_r+0x72>
 8003286:	68ac      	ldr	r4, [r5, #8]
 8003288:	e7d7      	b.n	800323a <_fwrite_r+0x22>
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <_fwrite_r+0xbc>)
 800328c:	429c      	cmp	r4, r3
 800328e:	bf08      	it	eq
 8003290:	68ec      	ldreq	r4, [r5, #12]
 8003292:	e7d2      	b.n	800323a <_fwrite_r+0x22>
 8003294:	4621      	mov	r1, r4
 8003296:	4628      	mov	r0, r5
 8003298:	f000 f8ae 	bl	80033f8 <__swsetup_r>
 800329c:	2800      	cmp	r0, #0
 800329e:	d0da      	beq.n	8003256 <_fwrite_r+0x3e>
 80032a0:	2600      	movs	r6, #0
 80032a2:	e005      	b.n	80032b0 <_fwrite_r+0x98>
 80032a4:	4622      	mov	r2, r4
 80032a6:	4628      	mov	r0, r5
 80032a8:	f000 f854 	bl	8003354 <__swbuf_r>
 80032ac:	3001      	adds	r0, #1
 80032ae:	d1e5      	bne.n	800327c <_fwrite_r+0x64>
 80032b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032b2:	07da      	lsls	r2, r3, #31
 80032b4:	d405      	bmi.n	80032c2 <_fwrite_r+0xaa>
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	059b      	lsls	r3, r3, #22
 80032ba:	d402      	bmi.n	80032c2 <_fwrite_r+0xaa>
 80032bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032be:	f000 f83f 	bl	8003340 <__retarget_lock_release_recursive>
 80032c2:	fbb6 f0f8 	udiv	r0, r6, r8
 80032c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ca:	bf00      	nop
 80032cc:	08003cc0 	.word	0x08003cc0
 80032d0:	08003ce0 	.word	0x08003ce0
 80032d4:	08003ca0 	.word	0x08003ca0

080032d8 <fwrite>:
 80032d8:	b507      	push	{r0, r1, r2, lr}
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	460a      	mov	r2, r1
 80032e0:	4601      	mov	r1, r0
 80032e2:	4803      	ldr	r0, [pc, #12]	; (80032f0 <fwrite+0x18>)
 80032e4:	6800      	ldr	r0, [r0, #0]
 80032e6:	f7ff ff97 	bl	8003218 <_fwrite_r>
 80032ea:	b003      	add	sp, #12
 80032ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80032f0:	20000010 	.word	0x20000010

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	4d0d      	ldr	r5, [pc, #52]	; (800332c <__libc_init_array+0x38>)
 80032f8:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <__libc_init_array+0x3c>)
 80032fa:	1b64      	subs	r4, r4, r5
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	2600      	movs	r6, #0
 8003300:	42a6      	cmp	r6, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	4d0b      	ldr	r5, [pc, #44]	; (8003334 <__libc_init_array+0x40>)
 8003306:	4c0c      	ldr	r4, [pc, #48]	; (8003338 <__libc_init_array+0x44>)
 8003308:	f000 fca2 	bl	8003c50 <_init>
 800330c:	1b64      	subs	r4, r4, r5
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	2600      	movs	r6, #0
 8003312:	42a6      	cmp	r6, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	f855 3b04 	ldr.w	r3, [r5], #4
 800331c:	4798      	blx	r3
 800331e:	3601      	adds	r6, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	f855 3b04 	ldr.w	r3, [r5], #4
 8003326:	4798      	blx	r3
 8003328:	3601      	adds	r6, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	08003d08 	.word	0x08003d08
 8003330:	08003d08 	.word	0x08003d08
 8003334:	08003d08 	.word	0x08003d08
 8003338:	08003d0c 	.word	0x08003d0c

0800333c <__retarget_lock_init_recursive>:
 800333c:	4770      	bx	lr

0800333e <__retarget_lock_acquire_recursive>:
 800333e:	4770      	bx	lr

08003340 <__retarget_lock_release_recursive>:
 8003340:	4770      	bx	lr

08003342 <memset>:
 8003342:	4402      	add	r2, r0
 8003344:	4603      	mov	r3, r0
 8003346:	4293      	cmp	r3, r2
 8003348:	d100      	bne.n	800334c <memset+0xa>
 800334a:	4770      	bx	lr
 800334c:	f803 1b01 	strb.w	r1, [r3], #1
 8003350:	e7f9      	b.n	8003346 <memset+0x4>
	...

08003354 <__swbuf_r>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	460e      	mov	r6, r1
 8003358:	4614      	mov	r4, r2
 800335a:	4605      	mov	r5, r0
 800335c:	b118      	cbz	r0, 8003366 <__swbuf_r+0x12>
 800335e:	6983      	ldr	r3, [r0, #24]
 8003360:	b90b      	cbnz	r3, 8003366 <__swbuf_r+0x12>
 8003362:	f000 f9cd 	bl	8003700 <__sinit>
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <__swbuf_r+0x98>)
 8003368:	429c      	cmp	r4, r3
 800336a:	d12b      	bne.n	80033c4 <__swbuf_r+0x70>
 800336c:	686c      	ldr	r4, [r5, #4]
 800336e:	69a3      	ldr	r3, [r4, #24]
 8003370:	60a3      	str	r3, [r4, #8]
 8003372:	89a3      	ldrh	r3, [r4, #12]
 8003374:	071a      	lsls	r2, r3, #28
 8003376:	d52f      	bpl.n	80033d8 <__swbuf_r+0x84>
 8003378:	6923      	ldr	r3, [r4, #16]
 800337a:	b36b      	cbz	r3, 80033d8 <__swbuf_r+0x84>
 800337c:	6923      	ldr	r3, [r4, #16]
 800337e:	6820      	ldr	r0, [r4, #0]
 8003380:	1ac0      	subs	r0, r0, r3
 8003382:	6963      	ldr	r3, [r4, #20]
 8003384:	b2f6      	uxtb	r6, r6
 8003386:	4283      	cmp	r3, r0
 8003388:	4637      	mov	r7, r6
 800338a:	dc04      	bgt.n	8003396 <__swbuf_r+0x42>
 800338c:	4621      	mov	r1, r4
 800338e:	4628      	mov	r0, r5
 8003390:	f000 f922 	bl	80035d8 <_fflush_r>
 8003394:	bb30      	cbnz	r0, 80033e4 <__swbuf_r+0x90>
 8003396:	68a3      	ldr	r3, [r4, #8]
 8003398:	3b01      	subs	r3, #1
 800339a:	60a3      	str	r3, [r4, #8]
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	6022      	str	r2, [r4, #0]
 80033a2:	701e      	strb	r6, [r3, #0]
 80033a4:	6963      	ldr	r3, [r4, #20]
 80033a6:	3001      	adds	r0, #1
 80033a8:	4283      	cmp	r3, r0
 80033aa:	d004      	beq.n	80033b6 <__swbuf_r+0x62>
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	07db      	lsls	r3, r3, #31
 80033b0:	d506      	bpl.n	80033c0 <__swbuf_r+0x6c>
 80033b2:	2e0a      	cmp	r6, #10
 80033b4:	d104      	bne.n	80033c0 <__swbuf_r+0x6c>
 80033b6:	4621      	mov	r1, r4
 80033b8:	4628      	mov	r0, r5
 80033ba:	f000 f90d 	bl	80035d8 <_fflush_r>
 80033be:	b988      	cbnz	r0, 80033e4 <__swbuf_r+0x90>
 80033c0:	4638      	mov	r0, r7
 80033c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <__swbuf_r+0x9c>)
 80033c6:	429c      	cmp	r4, r3
 80033c8:	d101      	bne.n	80033ce <__swbuf_r+0x7a>
 80033ca:	68ac      	ldr	r4, [r5, #8]
 80033cc:	e7cf      	b.n	800336e <__swbuf_r+0x1a>
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <__swbuf_r+0xa0>)
 80033d0:	429c      	cmp	r4, r3
 80033d2:	bf08      	it	eq
 80033d4:	68ec      	ldreq	r4, [r5, #12]
 80033d6:	e7ca      	b.n	800336e <__swbuf_r+0x1a>
 80033d8:	4621      	mov	r1, r4
 80033da:	4628      	mov	r0, r5
 80033dc:	f000 f80c 	bl	80033f8 <__swsetup_r>
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d0cb      	beq.n	800337c <__swbuf_r+0x28>
 80033e4:	f04f 37ff 	mov.w	r7, #4294967295
 80033e8:	e7ea      	b.n	80033c0 <__swbuf_r+0x6c>
 80033ea:	bf00      	nop
 80033ec:	08003cc0 	.word	0x08003cc0
 80033f0:	08003ce0 	.word	0x08003ce0
 80033f4:	08003ca0 	.word	0x08003ca0

080033f8 <__swsetup_r>:
 80033f8:	4b32      	ldr	r3, [pc, #200]	; (80034c4 <__swsetup_r+0xcc>)
 80033fa:	b570      	push	{r4, r5, r6, lr}
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	4606      	mov	r6, r0
 8003400:	460c      	mov	r4, r1
 8003402:	b125      	cbz	r5, 800340e <__swsetup_r+0x16>
 8003404:	69ab      	ldr	r3, [r5, #24]
 8003406:	b913      	cbnz	r3, 800340e <__swsetup_r+0x16>
 8003408:	4628      	mov	r0, r5
 800340a:	f000 f979 	bl	8003700 <__sinit>
 800340e:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <__swsetup_r+0xd0>)
 8003410:	429c      	cmp	r4, r3
 8003412:	d10f      	bne.n	8003434 <__swsetup_r+0x3c>
 8003414:	686c      	ldr	r4, [r5, #4]
 8003416:	89a3      	ldrh	r3, [r4, #12]
 8003418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800341c:	0719      	lsls	r1, r3, #28
 800341e:	d42c      	bmi.n	800347a <__swsetup_r+0x82>
 8003420:	06dd      	lsls	r5, r3, #27
 8003422:	d411      	bmi.n	8003448 <__swsetup_r+0x50>
 8003424:	2309      	movs	r3, #9
 8003426:	6033      	str	r3, [r6, #0]
 8003428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800342c:	81a3      	strh	r3, [r4, #12]
 800342e:	f04f 30ff 	mov.w	r0, #4294967295
 8003432:	e03e      	b.n	80034b2 <__swsetup_r+0xba>
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <__swsetup_r+0xd4>)
 8003436:	429c      	cmp	r4, r3
 8003438:	d101      	bne.n	800343e <__swsetup_r+0x46>
 800343a:	68ac      	ldr	r4, [r5, #8]
 800343c:	e7eb      	b.n	8003416 <__swsetup_r+0x1e>
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <__swsetup_r+0xd8>)
 8003440:	429c      	cmp	r4, r3
 8003442:	bf08      	it	eq
 8003444:	68ec      	ldreq	r4, [r5, #12]
 8003446:	e7e6      	b.n	8003416 <__swsetup_r+0x1e>
 8003448:	0758      	lsls	r0, r3, #29
 800344a:	d512      	bpl.n	8003472 <__swsetup_r+0x7a>
 800344c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800344e:	b141      	cbz	r1, 8003462 <__swsetup_r+0x6a>
 8003450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003454:	4299      	cmp	r1, r3
 8003456:	d002      	beq.n	800345e <__swsetup_r+0x66>
 8003458:	4630      	mov	r0, r6
 800345a:	f000 fa53 	bl	8003904 <_free_r>
 800345e:	2300      	movs	r3, #0
 8003460:	6363      	str	r3, [r4, #52]	; 0x34
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003468:	81a3      	strh	r3, [r4, #12]
 800346a:	2300      	movs	r3, #0
 800346c:	6063      	str	r3, [r4, #4]
 800346e:	6923      	ldr	r3, [r4, #16]
 8003470:	6023      	str	r3, [r4, #0]
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	81a3      	strh	r3, [r4, #12]
 800347a:	6923      	ldr	r3, [r4, #16]
 800347c:	b94b      	cbnz	r3, 8003492 <__swsetup_r+0x9a>
 800347e:	89a3      	ldrh	r3, [r4, #12]
 8003480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003488:	d003      	beq.n	8003492 <__swsetup_r+0x9a>
 800348a:	4621      	mov	r1, r4
 800348c:	4630      	mov	r0, r6
 800348e:	f000 f9f9 	bl	8003884 <__smakebuf_r>
 8003492:	89a0      	ldrh	r0, [r4, #12]
 8003494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003498:	f010 0301 	ands.w	r3, r0, #1
 800349c:	d00a      	beq.n	80034b4 <__swsetup_r+0xbc>
 800349e:	2300      	movs	r3, #0
 80034a0:	60a3      	str	r3, [r4, #8]
 80034a2:	6963      	ldr	r3, [r4, #20]
 80034a4:	425b      	negs	r3, r3
 80034a6:	61a3      	str	r3, [r4, #24]
 80034a8:	6923      	ldr	r3, [r4, #16]
 80034aa:	b943      	cbnz	r3, 80034be <__swsetup_r+0xc6>
 80034ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034b0:	d1ba      	bne.n	8003428 <__swsetup_r+0x30>
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
 80034b4:	0781      	lsls	r1, r0, #30
 80034b6:	bf58      	it	pl
 80034b8:	6963      	ldrpl	r3, [r4, #20]
 80034ba:	60a3      	str	r3, [r4, #8]
 80034bc:	e7f4      	b.n	80034a8 <__swsetup_r+0xb0>
 80034be:	2000      	movs	r0, #0
 80034c0:	e7f7      	b.n	80034b2 <__swsetup_r+0xba>
 80034c2:	bf00      	nop
 80034c4:	20000010 	.word	0x20000010
 80034c8:	08003cc0 	.word	0x08003cc0
 80034cc:	08003ce0 	.word	0x08003ce0
 80034d0:	08003ca0 	.word	0x08003ca0

080034d4 <__sflush_r>:
 80034d4:	898a      	ldrh	r2, [r1, #12]
 80034d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d8:	4605      	mov	r5, r0
 80034da:	0710      	lsls	r0, r2, #28
 80034dc:	460c      	mov	r4, r1
 80034de:	d457      	bmi.n	8003590 <__sflush_r+0xbc>
 80034e0:	684b      	ldr	r3, [r1, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	dc04      	bgt.n	80034f0 <__sflush_r+0x1c>
 80034e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	dc01      	bgt.n	80034f0 <__sflush_r+0x1c>
 80034ec:	2000      	movs	r0, #0
 80034ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034f2:	2e00      	cmp	r6, #0
 80034f4:	d0fa      	beq.n	80034ec <__sflush_r+0x18>
 80034f6:	2300      	movs	r3, #0
 80034f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034fc:	682f      	ldr	r7, [r5, #0]
 80034fe:	602b      	str	r3, [r5, #0]
 8003500:	d032      	beq.n	8003568 <__sflush_r+0x94>
 8003502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	075a      	lsls	r2, r3, #29
 8003508:	d505      	bpl.n	8003516 <__sflush_r+0x42>
 800350a:	6863      	ldr	r3, [r4, #4]
 800350c:	1ac0      	subs	r0, r0, r3
 800350e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003510:	b10b      	cbz	r3, 8003516 <__sflush_r+0x42>
 8003512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003514:	1ac0      	subs	r0, r0, r3
 8003516:	2300      	movs	r3, #0
 8003518:	4602      	mov	r2, r0
 800351a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800351c:	6a21      	ldr	r1, [r4, #32]
 800351e:	4628      	mov	r0, r5
 8003520:	47b0      	blx	r6
 8003522:	1c43      	adds	r3, r0, #1
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	d106      	bne.n	8003536 <__sflush_r+0x62>
 8003528:	6829      	ldr	r1, [r5, #0]
 800352a:	291d      	cmp	r1, #29
 800352c:	d82c      	bhi.n	8003588 <__sflush_r+0xb4>
 800352e:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <__sflush_r+0x100>)
 8003530:	40ca      	lsrs	r2, r1
 8003532:	07d6      	lsls	r6, r2, #31
 8003534:	d528      	bpl.n	8003588 <__sflush_r+0xb4>
 8003536:	2200      	movs	r2, #0
 8003538:	6062      	str	r2, [r4, #4]
 800353a:	04d9      	lsls	r1, r3, #19
 800353c:	6922      	ldr	r2, [r4, #16]
 800353e:	6022      	str	r2, [r4, #0]
 8003540:	d504      	bpl.n	800354c <__sflush_r+0x78>
 8003542:	1c42      	adds	r2, r0, #1
 8003544:	d101      	bne.n	800354a <__sflush_r+0x76>
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	b903      	cbnz	r3, 800354c <__sflush_r+0x78>
 800354a:	6560      	str	r0, [r4, #84]	; 0x54
 800354c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800354e:	602f      	str	r7, [r5, #0]
 8003550:	2900      	cmp	r1, #0
 8003552:	d0cb      	beq.n	80034ec <__sflush_r+0x18>
 8003554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003558:	4299      	cmp	r1, r3
 800355a:	d002      	beq.n	8003562 <__sflush_r+0x8e>
 800355c:	4628      	mov	r0, r5
 800355e:	f000 f9d1 	bl	8003904 <_free_r>
 8003562:	2000      	movs	r0, #0
 8003564:	6360      	str	r0, [r4, #52]	; 0x34
 8003566:	e7c2      	b.n	80034ee <__sflush_r+0x1a>
 8003568:	6a21      	ldr	r1, [r4, #32]
 800356a:	2301      	movs	r3, #1
 800356c:	4628      	mov	r0, r5
 800356e:	47b0      	blx	r6
 8003570:	1c41      	adds	r1, r0, #1
 8003572:	d1c7      	bne.n	8003504 <__sflush_r+0x30>
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0c4      	beq.n	8003504 <__sflush_r+0x30>
 800357a:	2b1d      	cmp	r3, #29
 800357c:	d001      	beq.n	8003582 <__sflush_r+0xae>
 800357e:	2b16      	cmp	r3, #22
 8003580:	d101      	bne.n	8003586 <__sflush_r+0xb2>
 8003582:	602f      	str	r7, [r5, #0]
 8003584:	e7b2      	b.n	80034ec <__sflush_r+0x18>
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	e7ae      	b.n	80034ee <__sflush_r+0x1a>
 8003590:	690f      	ldr	r7, [r1, #16]
 8003592:	2f00      	cmp	r7, #0
 8003594:	d0aa      	beq.n	80034ec <__sflush_r+0x18>
 8003596:	0793      	lsls	r3, r2, #30
 8003598:	680e      	ldr	r6, [r1, #0]
 800359a:	bf08      	it	eq
 800359c:	694b      	ldreq	r3, [r1, #20]
 800359e:	600f      	str	r7, [r1, #0]
 80035a0:	bf18      	it	ne
 80035a2:	2300      	movne	r3, #0
 80035a4:	1bf6      	subs	r6, r6, r7
 80035a6:	608b      	str	r3, [r1, #8]
 80035a8:	2e00      	cmp	r6, #0
 80035aa:	dd9f      	ble.n	80034ec <__sflush_r+0x18>
 80035ac:	6a21      	ldr	r1, [r4, #32]
 80035ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80035b2:	4633      	mov	r3, r6
 80035b4:	463a      	mov	r2, r7
 80035b6:	4628      	mov	r0, r5
 80035b8:	47e0      	blx	ip
 80035ba:	2800      	cmp	r0, #0
 80035bc:	dc06      	bgt.n	80035cc <__sflush_r+0xf8>
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c4:	81a3      	strh	r3, [r4, #12]
 80035c6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ca:	e790      	b.n	80034ee <__sflush_r+0x1a>
 80035cc:	4407      	add	r7, r0
 80035ce:	1a36      	subs	r6, r6, r0
 80035d0:	e7ea      	b.n	80035a8 <__sflush_r+0xd4>
 80035d2:	bf00      	nop
 80035d4:	20400001 	.word	0x20400001

080035d8 <_fflush_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	690b      	ldr	r3, [r1, #16]
 80035dc:	4605      	mov	r5, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	b913      	cbnz	r3, 80035e8 <_fflush_r+0x10>
 80035e2:	2500      	movs	r5, #0
 80035e4:	4628      	mov	r0, r5
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
 80035e8:	b118      	cbz	r0, 80035f2 <_fflush_r+0x1a>
 80035ea:	6983      	ldr	r3, [r0, #24]
 80035ec:	b90b      	cbnz	r3, 80035f2 <_fflush_r+0x1a>
 80035ee:	f000 f887 	bl	8003700 <__sinit>
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <_fflush_r+0x6c>)
 80035f4:	429c      	cmp	r4, r3
 80035f6:	d11b      	bne.n	8003630 <_fflush_r+0x58>
 80035f8:	686c      	ldr	r4, [r5, #4]
 80035fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ef      	beq.n	80035e2 <_fflush_r+0xa>
 8003602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003604:	07d0      	lsls	r0, r2, #31
 8003606:	d404      	bmi.n	8003612 <_fflush_r+0x3a>
 8003608:	0599      	lsls	r1, r3, #22
 800360a:	d402      	bmi.n	8003612 <_fflush_r+0x3a>
 800360c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800360e:	f7ff fe96 	bl	800333e <__retarget_lock_acquire_recursive>
 8003612:	4628      	mov	r0, r5
 8003614:	4621      	mov	r1, r4
 8003616:	f7ff ff5d 	bl	80034d4 <__sflush_r>
 800361a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800361c:	07da      	lsls	r2, r3, #31
 800361e:	4605      	mov	r5, r0
 8003620:	d4e0      	bmi.n	80035e4 <_fflush_r+0xc>
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	059b      	lsls	r3, r3, #22
 8003626:	d4dd      	bmi.n	80035e4 <_fflush_r+0xc>
 8003628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800362a:	f7ff fe89 	bl	8003340 <__retarget_lock_release_recursive>
 800362e:	e7d9      	b.n	80035e4 <_fflush_r+0xc>
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <_fflush_r+0x70>)
 8003632:	429c      	cmp	r4, r3
 8003634:	d101      	bne.n	800363a <_fflush_r+0x62>
 8003636:	68ac      	ldr	r4, [r5, #8]
 8003638:	e7df      	b.n	80035fa <_fflush_r+0x22>
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <_fflush_r+0x74>)
 800363c:	429c      	cmp	r4, r3
 800363e:	bf08      	it	eq
 8003640:	68ec      	ldreq	r4, [r5, #12]
 8003642:	e7da      	b.n	80035fa <_fflush_r+0x22>
 8003644:	08003cc0 	.word	0x08003cc0
 8003648:	08003ce0 	.word	0x08003ce0
 800364c:	08003ca0 	.word	0x08003ca0

08003650 <std>:
 8003650:	2300      	movs	r3, #0
 8003652:	b510      	push	{r4, lr}
 8003654:	4604      	mov	r4, r0
 8003656:	e9c0 3300 	strd	r3, r3, [r0]
 800365a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800365e:	6083      	str	r3, [r0, #8]
 8003660:	8181      	strh	r1, [r0, #12]
 8003662:	6643      	str	r3, [r0, #100]	; 0x64
 8003664:	81c2      	strh	r2, [r0, #14]
 8003666:	6183      	str	r3, [r0, #24]
 8003668:	4619      	mov	r1, r3
 800366a:	2208      	movs	r2, #8
 800366c:	305c      	adds	r0, #92	; 0x5c
 800366e:	f7ff fe68 	bl	8003342 <memset>
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <std+0x38>)
 8003674:	6263      	str	r3, [r4, #36]	; 0x24
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <std+0x3c>)
 8003678:	62a3      	str	r3, [r4, #40]	; 0x28
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <std+0x40>)
 800367c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <std+0x44>)
 8003680:	6224      	str	r4, [r4, #32]
 8003682:	6323      	str	r3, [r4, #48]	; 0x30
 8003684:	bd10      	pop	{r4, pc}
 8003686:	bf00      	nop
 8003688:	08003ae1 	.word	0x08003ae1
 800368c:	08003b03 	.word	0x08003b03
 8003690:	08003b3b 	.word	0x08003b3b
 8003694:	08003b5f 	.word	0x08003b5f

08003698 <_cleanup_r>:
 8003698:	4901      	ldr	r1, [pc, #4]	; (80036a0 <_cleanup_r+0x8>)
 800369a:	f000 b8af 	b.w	80037fc <_fwalk_reent>
 800369e:	bf00      	nop
 80036a0:	080035d9 	.word	0x080035d9

080036a4 <__sfmoreglue>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	2268      	movs	r2, #104	; 0x68
 80036a8:	1e4d      	subs	r5, r1, #1
 80036aa:	4355      	muls	r5, r2
 80036ac:	460e      	mov	r6, r1
 80036ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036b2:	f000 f991 	bl	80039d8 <_malloc_r>
 80036b6:	4604      	mov	r4, r0
 80036b8:	b140      	cbz	r0, 80036cc <__sfmoreglue+0x28>
 80036ba:	2100      	movs	r1, #0
 80036bc:	e9c0 1600 	strd	r1, r6, [r0]
 80036c0:	300c      	adds	r0, #12
 80036c2:	60a0      	str	r0, [r4, #8]
 80036c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036c8:	f7ff fe3b 	bl	8003342 <memset>
 80036cc:	4620      	mov	r0, r4
 80036ce:	bd70      	pop	{r4, r5, r6, pc}

080036d0 <__sfp_lock_acquire>:
 80036d0:	4801      	ldr	r0, [pc, #4]	; (80036d8 <__sfp_lock_acquire+0x8>)
 80036d2:	f7ff be34 	b.w	800333e <__retarget_lock_acquire_recursive>
 80036d6:	bf00      	nop
 80036d8:	2000011d 	.word	0x2000011d

080036dc <__sfp_lock_release>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__sfp_lock_release+0x8>)
 80036de:	f7ff be2f 	b.w	8003340 <__retarget_lock_release_recursive>
 80036e2:	bf00      	nop
 80036e4:	2000011d 	.word	0x2000011d

080036e8 <__sinit_lock_acquire>:
 80036e8:	4801      	ldr	r0, [pc, #4]	; (80036f0 <__sinit_lock_acquire+0x8>)
 80036ea:	f7ff be28 	b.w	800333e <__retarget_lock_acquire_recursive>
 80036ee:	bf00      	nop
 80036f0:	2000011e 	.word	0x2000011e

080036f4 <__sinit_lock_release>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__sinit_lock_release+0x8>)
 80036f6:	f7ff be23 	b.w	8003340 <__retarget_lock_release_recursive>
 80036fa:	bf00      	nop
 80036fc:	2000011e 	.word	0x2000011e

08003700 <__sinit>:
 8003700:	b510      	push	{r4, lr}
 8003702:	4604      	mov	r4, r0
 8003704:	f7ff fff0 	bl	80036e8 <__sinit_lock_acquire>
 8003708:	69a3      	ldr	r3, [r4, #24]
 800370a:	b11b      	cbz	r3, 8003714 <__sinit+0x14>
 800370c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003710:	f7ff bff0 	b.w	80036f4 <__sinit_lock_release>
 8003714:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003718:	6523      	str	r3, [r4, #80]	; 0x50
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <__sinit+0x68>)
 800371c:	4a13      	ldr	r2, [pc, #76]	; (800376c <__sinit+0x6c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	62a2      	str	r2, [r4, #40]	; 0x28
 8003722:	42a3      	cmp	r3, r4
 8003724:	bf04      	itt	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	61a3      	streq	r3, [r4, #24]
 800372a:	4620      	mov	r0, r4
 800372c:	f000 f820 	bl	8003770 <__sfp>
 8003730:	6060      	str	r0, [r4, #4]
 8003732:	4620      	mov	r0, r4
 8003734:	f000 f81c 	bl	8003770 <__sfp>
 8003738:	60a0      	str	r0, [r4, #8]
 800373a:	4620      	mov	r0, r4
 800373c:	f000 f818 	bl	8003770 <__sfp>
 8003740:	2200      	movs	r2, #0
 8003742:	60e0      	str	r0, [r4, #12]
 8003744:	2104      	movs	r1, #4
 8003746:	6860      	ldr	r0, [r4, #4]
 8003748:	f7ff ff82 	bl	8003650 <std>
 800374c:	68a0      	ldr	r0, [r4, #8]
 800374e:	2201      	movs	r2, #1
 8003750:	2109      	movs	r1, #9
 8003752:	f7ff ff7d 	bl	8003650 <std>
 8003756:	68e0      	ldr	r0, [r4, #12]
 8003758:	2202      	movs	r2, #2
 800375a:	2112      	movs	r1, #18
 800375c:	f7ff ff78 	bl	8003650 <std>
 8003760:	2301      	movs	r3, #1
 8003762:	61a3      	str	r3, [r4, #24]
 8003764:	e7d2      	b.n	800370c <__sinit+0xc>
 8003766:	bf00      	nop
 8003768:	08003c9c 	.word	0x08003c9c
 800376c:	08003699 	.word	0x08003699

08003770 <__sfp>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	4607      	mov	r7, r0
 8003774:	f7ff ffac 	bl	80036d0 <__sfp_lock_acquire>
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <__sfp+0x84>)
 800377a:	681e      	ldr	r6, [r3, #0]
 800377c:	69b3      	ldr	r3, [r6, #24]
 800377e:	b913      	cbnz	r3, 8003786 <__sfp+0x16>
 8003780:	4630      	mov	r0, r6
 8003782:	f7ff ffbd 	bl	8003700 <__sinit>
 8003786:	3648      	adds	r6, #72	; 0x48
 8003788:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800378c:	3b01      	subs	r3, #1
 800378e:	d503      	bpl.n	8003798 <__sfp+0x28>
 8003790:	6833      	ldr	r3, [r6, #0]
 8003792:	b30b      	cbz	r3, 80037d8 <__sfp+0x68>
 8003794:	6836      	ldr	r6, [r6, #0]
 8003796:	e7f7      	b.n	8003788 <__sfp+0x18>
 8003798:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800379c:	b9d5      	cbnz	r5, 80037d4 <__sfp+0x64>
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <__sfp+0x88>)
 80037a0:	60e3      	str	r3, [r4, #12]
 80037a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80037a6:	6665      	str	r5, [r4, #100]	; 0x64
 80037a8:	f7ff fdc8 	bl	800333c <__retarget_lock_init_recursive>
 80037ac:	f7ff ff96 	bl	80036dc <__sfp_lock_release>
 80037b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80037b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80037b8:	6025      	str	r5, [r4, #0]
 80037ba:	61a5      	str	r5, [r4, #24]
 80037bc:	2208      	movs	r2, #8
 80037be:	4629      	mov	r1, r5
 80037c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037c4:	f7ff fdbd 	bl	8003342 <memset>
 80037c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037d0:	4620      	mov	r0, r4
 80037d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d4:	3468      	adds	r4, #104	; 0x68
 80037d6:	e7d9      	b.n	800378c <__sfp+0x1c>
 80037d8:	2104      	movs	r1, #4
 80037da:	4638      	mov	r0, r7
 80037dc:	f7ff ff62 	bl	80036a4 <__sfmoreglue>
 80037e0:	4604      	mov	r4, r0
 80037e2:	6030      	str	r0, [r6, #0]
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d1d5      	bne.n	8003794 <__sfp+0x24>
 80037e8:	f7ff ff78 	bl	80036dc <__sfp_lock_release>
 80037ec:	230c      	movs	r3, #12
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	e7ee      	b.n	80037d0 <__sfp+0x60>
 80037f2:	bf00      	nop
 80037f4:	08003c9c 	.word	0x08003c9c
 80037f8:	ffff0001 	.word	0xffff0001

080037fc <_fwalk_reent>:
 80037fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003800:	4606      	mov	r6, r0
 8003802:	4688      	mov	r8, r1
 8003804:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003808:	2700      	movs	r7, #0
 800380a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800380e:	f1b9 0901 	subs.w	r9, r9, #1
 8003812:	d505      	bpl.n	8003820 <_fwalk_reent+0x24>
 8003814:	6824      	ldr	r4, [r4, #0]
 8003816:	2c00      	cmp	r4, #0
 8003818:	d1f7      	bne.n	800380a <_fwalk_reent+0xe>
 800381a:	4638      	mov	r0, r7
 800381c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003820:	89ab      	ldrh	r3, [r5, #12]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d907      	bls.n	8003836 <_fwalk_reent+0x3a>
 8003826:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800382a:	3301      	adds	r3, #1
 800382c:	d003      	beq.n	8003836 <_fwalk_reent+0x3a>
 800382e:	4629      	mov	r1, r5
 8003830:	4630      	mov	r0, r6
 8003832:	47c0      	blx	r8
 8003834:	4307      	orrs	r7, r0
 8003836:	3568      	adds	r5, #104	; 0x68
 8003838:	e7e9      	b.n	800380e <_fwalk_reent+0x12>

0800383a <__swhatbuf_r>:
 800383a:	b570      	push	{r4, r5, r6, lr}
 800383c:	460e      	mov	r6, r1
 800383e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003842:	2900      	cmp	r1, #0
 8003844:	b096      	sub	sp, #88	; 0x58
 8003846:	4614      	mov	r4, r2
 8003848:	461d      	mov	r5, r3
 800384a:	da08      	bge.n	800385e <__swhatbuf_r+0x24>
 800384c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	602a      	str	r2, [r5, #0]
 8003854:	061a      	lsls	r2, r3, #24
 8003856:	d410      	bmi.n	800387a <__swhatbuf_r+0x40>
 8003858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800385c:	e00e      	b.n	800387c <__swhatbuf_r+0x42>
 800385e:	466a      	mov	r2, sp
 8003860:	f000 f9a4 	bl	8003bac <_fstat_r>
 8003864:	2800      	cmp	r0, #0
 8003866:	dbf1      	blt.n	800384c <__swhatbuf_r+0x12>
 8003868:	9a01      	ldr	r2, [sp, #4]
 800386a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800386e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003872:	425a      	negs	r2, r3
 8003874:	415a      	adcs	r2, r3
 8003876:	602a      	str	r2, [r5, #0]
 8003878:	e7ee      	b.n	8003858 <__swhatbuf_r+0x1e>
 800387a:	2340      	movs	r3, #64	; 0x40
 800387c:	2000      	movs	r0, #0
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	b016      	add	sp, #88	; 0x58
 8003882:	bd70      	pop	{r4, r5, r6, pc}

08003884 <__smakebuf_r>:
 8003884:	898b      	ldrh	r3, [r1, #12]
 8003886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003888:	079d      	lsls	r5, r3, #30
 800388a:	4606      	mov	r6, r0
 800388c:	460c      	mov	r4, r1
 800388e:	d507      	bpl.n	80038a0 <__smakebuf_r+0x1c>
 8003890:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	6123      	str	r3, [r4, #16]
 8003898:	2301      	movs	r3, #1
 800389a:	6163      	str	r3, [r4, #20]
 800389c:	b002      	add	sp, #8
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	ab01      	add	r3, sp, #4
 80038a2:	466a      	mov	r2, sp
 80038a4:	f7ff ffc9 	bl	800383a <__swhatbuf_r>
 80038a8:	9900      	ldr	r1, [sp, #0]
 80038aa:	4605      	mov	r5, r0
 80038ac:	4630      	mov	r0, r6
 80038ae:	f000 f893 	bl	80039d8 <_malloc_r>
 80038b2:	b948      	cbnz	r0, 80038c8 <__smakebuf_r+0x44>
 80038b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038b8:	059a      	lsls	r2, r3, #22
 80038ba:	d4ef      	bmi.n	800389c <__smakebuf_r+0x18>
 80038bc:	f023 0303 	bic.w	r3, r3, #3
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	81a3      	strh	r3, [r4, #12]
 80038c6:	e7e3      	b.n	8003890 <__smakebuf_r+0xc>
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <__smakebuf_r+0x7c>)
 80038ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80038cc:	89a3      	ldrh	r3, [r4, #12]
 80038ce:	6020      	str	r0, [r4, #0]
 80038d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	9b00      	ldr	r3, [sp, #0]
 80038d8:	6163      	str	r3, [r4, #20]
 80038da:	9b01      	ldr	r3, [sp, #4]
 80038dc:	6120      	str	r0, [r4, #16]
 80038de:	b15b      	cbz	r3, 80038f8 <__smakebuf_r+0x74>
 80038e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038e4:	4630      	mov	r0, r6
 80038e6:	f000 f973 	bl	8003bd0 <_isatty_r>
 80038ea:	b128      	cbz	r0, 80038f8 <__smakebuf_r+0x74>
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	81a3      	strh	r3, [r4, #12]
 80038f8:	89a0      	ldrh	r0, [r4, #12]
 80038fa:	4305      	orrs	r5, r0
 80038fc:	81a5      	strh	r5, [r4, #12]
 80038fe:	e7cd      	b.n	800389c <__smakebuf_r+0x18>
 8003900:	08003699 	.word	0x08003699

08003904 <_free_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4605      	mov	r5, r0
 8003908:	2900      	cmp	r1, #0
 800390a:	d041      	beq.n	8003990 <_free_r+0x8c>
 800390c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003910:	1f0c      	subs	r4, r1, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	bfb8      	it	lt
 8003916:	18e4      	addlt	r4, r4, r3
 8003918:	f000 f97c 	bl	8003c14 <__malloc_lock>
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <_free_r+0x90>)
 800391e:	6813      	ldr	r3, [r2, #0]
 8003920:	b933      	cbnz	r3, 8003930 <_free_r+0x2c>
 8003922:	6063      	str	r3, [r4, #4]
 8003924:	6014      	str	r4, [r2, #0]
 8003926:	4628      	mov	r0, r5
 8003928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800392c:	f000 b978 	b.w	8003c20 <__malloc_unlock>
 8003930:	42a3      	cmp	r3, r4
 8003932:	d908      	bls.n	8003946 <_free_r+0x42>
 8003934:	6820      	ldr	r0, [r4, #0]
 8003936:	1821      	adds	r1, r4, r0
 8003938:	428b      	cmp	r3, r1
 800393a:	bf01      	itttt	eq
 800393c:	6819      	ldreq	r1, [r3, #0]
 800393e:	685b      	ldreq	r3, [r3, #4]
 8003940:	1809      	addeq	r1, r1, r0
 8003942:	6021      	streq	r1, [r4, #0]
 8003944:	e7ed      	b.n	8003922 <_free_r+0x1e>
 8003946:	461a      	mov	r2, r3
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	b10b      	cbz	r3, 8003950 <_free_r+0x4c>
 800394c:	42a3      	cmp	r3, r4
 800394e:	d9fa      	bls.n	8003946 <_free_r+0x42>
 8003950:	6811      	ldr	r1, [r2, #0]
 8003952:	1850      	adds	r0, r2, r1
 8003954:	42a0      	cmp	r0, r4
 8003956:	d10b      	bne.n	8003970 <_free_r+0x6c>
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	4401      	add	r1, r0
 800395c:	1850      	adds	r0, r2, r1
 800395e:	4283      	cmp	r3, r0
 8003960:	6011      	str	r1, [r2, #0]
 8003962:	d1e0      	bne.n	8003926 <_free_r+0x22>
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	6053      	str	r3, [r2, #4]
 800396a:	4401      	add	r1, r0
 800396c:	6011      	str	r1, [r2, #0]
 800396e:	e7da      	b.n	8003926 <_free_r+0x22>
 8003970:	d902      	bls.n	8003978 <_free_r+0x74>
 8003972:	230c      	movs	r3, #12
 8003974:	602b      	str	r3, [r5, #0]
 8003976:	e7d6      	b.n	8003926 <_free_r+0x22>
 8003978:	6820      	ldr	r0, [r4, #0]
 800397a:	1821      	adds	r1, r4, r0
 800397c:	428b      	cmp	r3, r1
 800397e:	bf04      	itt	eq
 8003980:	6819      	ldreq	r1, [r3, #0]
 8003982:	685b      	ldreq	r3, [r3, #4]
 8003984:	6063      	str	r3, [r4, #4]
 8003986:	bf04      	itt	eq
 8003988:	1809      	addeq	r1, r1, r0
 800398a:	6021      	streq	r1, [r4, #0]
 800398c:	6054      	str	r4, [r2, #4]
 800398e:	e7ca      	b.n	8003926 <_free_r+0x22>
 8003990:	bd38      	pop	{r3, r4, r5, pc}
 8003992:	bf00      	nop
 8003994:	20000120 	.word	0x20000120

08003998 <sbrk_aligned>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	4e0e      	ldr	r6, [pc, #56]	; (80039d4 <sbrk_aligned+0x3c>)
 800399c:	460c      	mov	r4, r1
 800399e:	6831      	ldr	r1, [r6, #0]
 80039a0:	4605      	mov	r5, r0
 80039a2:	b911      	cbnz	r1, 80039aa <sbrk_aligned+0x12>
 80039a4:	f000 f88c 	bl	8003ac0 <_sbrk_r>
 80039a8:	6030      	str	r0, [r6, #0]
 80039aa:	4621      	mov	r1, r4
 80039ac:	4628      	mov	r0, r5
 80039ae:	f000 f887 	bl	8003ac0 <_sbrk_r>
 80039b2:	1c43      	adds	r3, r0, #1
 80039b4:	d00a      	beq.n	80039cc <sbrk_aligned+0x34>
 80039b6:	1cc4      	adds	r4, r0, #3
 80039b8:	f024 0403 	bic.w	r4, r4, #3
 80039bc:	42a0      	cmp	r0, r4
 80039be:	d007      	beq.n	80039d0 <sbrk_aligned+0x38>
 80039c0:	1a21      	subs	r1, r4, r0
 80039c2:	4628      	mov	r0, r5
 80039c4:	f000 f87c 	bl	8003ac0 <_sbrk_r>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d101      	bne.n	80039d0 <sbrk_aligned+0x38>
 80039cc:	f04f 34ff 	mov.w	r4, #4294967295
 80039d0:	4620      	mov	r0, r4
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	20000124 	.word	0x20000124

080039d8 <_malloc_r>:
 80039d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039dc:	1ccd      	adds	r5, r1, #3
 80039de:	f025 0503 	bic.w	r5, r5, #3
 80039e2:	3508      	adds	r5, #8
 80039e4:	2d0c      	cmp	r5, #12
 80039e6:	bf38      	it	cc
 80039e8:	250c      	movcc	r5, #12
 80039ea:	2d00      	cmp	r5, #0
 80039ec:	4607      	mov	r7, r0
 80039ee:	db01      	blt.n	80039f4 <_malloc_r+0x1c>
 80039f0:	42a9      	cmp	r1, r5
 80039f2:	d905      	bls.n	8003a00 <_malloc_r+0x28>
 80039f4:	230c      	movs	r3, #12
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	2600      	movs	r6, #0
 80039fa:	4630      	mov	r0, r6
 80039fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a00:	4e2e      	ldr	r6, [pc, #184]	; (8003abc <_malloc_r+0xe4>)
 8003a02:	f000 f907 	bl	8003c14 <__malloc_lock>
 8003a06:	6833      	ldr	r3, [r6, #0]
 8003a08:	461c      	mov	r4, r3
 8003a0a:	bb34      	cbnz	r4, 8003a5a <_malloc_r+0x82>
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	4638      	mov	r0, r7
 8003a10:	f7ff ffc2 	bl	8003998 <sbrk_aligned>
 8003a14:	1c43      	adds	r3, r0, #1
 8003a16:	4604      	mov	r4, r0
 8003a18:	d14d      	bne.n	8003ab6 <_malloc_r+0xde>
 8003a1a:	6834      	ldr	r4, [r6, #0]
 8003a1c:	4626      	mov	r6, r4
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	d140      	bne.n	8003aa4 <_malloc_r+0xcc>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	4631      	mov	r1, r6
 8003a26:	4638      	mov	r0, r7
 8003a28:	eb04 0803 	add.w	r8, r4, r3
 8003a2c:	f000 f848 	bl	8003ac0 <_sbrk_r>
 8003a30:	4580      	cmp	r8, r0
 8003a32:	d13a      	bne.n	8003aaa <_malloc_r+0xd2>
 8003a34:	6821      	ldr	r1, [r4, #0]
 8003a36:	3503      	adds	r5, #3
 8003a38:	1a6d      	subs	r5, r5, r1
 8003a3a:	f025 0503 	bic.w	r5, r5, #3
 8003a3e:	3508      	adds	r5, #8
 8003a40:	2d0c      	cmp	r5, #12
 8003a42:	bf38      	it	cc
 8003a44:	250c      	movcc	r5, #12
 8003a46:	4629      	mov	r1, r5
 8003a48:	4638      	mov	r0, r7
 8003a4a:	f7ff ffa5 	bl	8003998 <sbrk_aligned>
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d02b      	beq.n	8003aaa <_malloc_r+0xd2>
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	442b      	add	r3, r5
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	e00e      	b.n	8003a78 <_malloc_r+0xa0>
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	1b52      	subs	r2, r2, r5
 8003a5e:	d41e      	bmi.n	8003a9e <_malloc_r+0xc6>
 8003a60:	2a0b      	cmp	r2, #11
 8003a62:	d916      	bls.n	8003a92 <_malloc_r+0xba>
 8003a64:	1961      	adds	r1, r4, r5
 8003a66:	42a3      	cmp	r3, r4
 8003a68:	6025      	str	r5, [r4, #0]
 8003a6a:	bf18      	it	ne
 8003a6c:	6059      	strne	r1, [r3, #4]
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	bf08      	it	eq
 8003a72:	6031      	streq	r1, [r6, #0]
 8003a74:	5162      	str	r2, [r4, r5]
 8003a76:	604b      	str	r3, [r1, #4]
 8003a78:	4638      	mov	r0, r7
 8003a7a:	f104 060b 	add.w	r6, r4, #11
 8003a7e:	f000 f8cf 	bl	8003c20 <__malloc_unlock>
 8003a82:	f026 0607 	bic.w	r6, r6, #7
 8003a86:	1d23      	adds	r3, r4, #4
 8003a88:	1af2      	subs	r2, r6, r3
 8003a8a:	d0b6      	beq.n	80039fa <_malloc_r+0x22>
 8003a8c:	1b9b      	subs	r3, r3, r6
 8003a8e:	50a3      	str	r3, [r4, r2]
 8003a90:	e7b3      	b.n	80039fa <_malloc_r+0x22>
 8003a92:	6862      	ldr	r2, [r4, #4]
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	bf0c      	ite	eq
 8003a98:	6032      	streq	r2, [r6, #0]
 8003a9a:	605a      	strne	r2, [r3, #4]
 8003a9c:	e7ec      	b.n	8003a78 <_malloc_r+0xa0>
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	6864      	ldr	r4, [r4, #4]
 8003aa2:	e7b2      	b.n	8003a0a <_malloc_r+0x32>
 8003aa4:	4634      	mov	r4, r6
 8003aa6:	6876      	ldr	r6, [r6, #4]
 8003aa8:	e7b9      	b.n	8003a1e <_malloc_r+0x46>
 8003aaa:	230c      	movs	r3, #12
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	4638      	mov	r0, r7
 8003ab0:	f000 f8b6 	bl	8003c20 <__malloc_unlock>
 8003ab4:	e7a1      	b.n	80039fa <_malloc_r+0x22>
 8003ab6:	6025      	str	r5, [r4, #0]
 8003ab8:	e7de      	b.n	8003a78 <_malloc_r+0xa0>
 8003aba:	bf00      	nop
 8003abc:	20000120 	.word	0x20000120

08003ac0 <_sbrk_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4d06      	ldr	r5, [pc, #24]	; (8003adc <_sbrk_r+0x1c>)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fc fff8 	bl	8000ac0 <_sbrk>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_sbrk_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_sbrk_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	20000128 	.word	0x20000128

08003ae0 <__sread>:
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae8:	f000 f8a0 	bl	8003c2c <_read_r>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	bfab      	itete	ge
 8003af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003af2:	89a3      	ldrhlt	r3, [r4, #12]
 8003af4:	181b      	addge	r3, r3, r0
 8003af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003afa:	bfac      	ite	ge
 8003afc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003afe:	81a3      	strhlt	r3, [r4, #12]
 8003b00:	bd10      	pop	{r4, pc}

08003b02 <__swrite>:
 8003b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b06:	461f      	mov	r7, r3
 8003b08:	898b      	ldrh	r3, [r1, #12]
 8003b0a:	05db      	lsls	r3, r3, #23
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	4616      	mov	r6, r2
 8003b12:	d505      	bpl.n	8003b20 <__swrite+0x1e>
 8003b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b18:	2302      	movs	r3, #2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f000 f868 	bl	8003bf0 <_lseek_r>
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	463b      	mov	r3, r7
 8003b30:	4628      	mov	r0, r5
 8003b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b36:	f000 b817 	b.w	8003b68 <_write_r>

08003b3a <__sseek>:
 8003b3a:	b510      	push	{r4, lr}
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b42:	f000 f855 	bl	8003bf0 <_lseek_r>
 8003b46:	1c43      	adds	r3, r0, #1
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	bf15      	itete	ne
 8003b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b56:	81a3      	strheq	r3, [r4, #12]
 8003b58:	bf18      	it	ne
 8003b5a:	81a3      	strhne	r3, [r4, #12]
 8003b5c:	bd10      	pop	{r4, pc}

08003b5e <__sclose>:
 8003b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b62:	f000 b813 	b.w	8003b8c <_close_r>
	...

08003b68 <_write_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4d07      	ldr	r5, [pc, #28]	; (8003b88 <_write_r+0x20>)
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	4608      	mov	r0, r1
 8003b70:	4611      	mov	r1, r2
 8003b72:	2200      	movs	r2, #0
 8003b74:	602a      	str	r2, [r5, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f7fc ff56 	bl	8000a28 <_write>
 8003b7c:	1c43      	adds	r3, r0, #1
 8003b7e:	d102      	bne.n	8003b86 <_write_r+0x1e>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	b103      	cbz	r3, 8003b86 <_write_r+0x1e>
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	bd38      	pop	{r3, r4, r5, pc}
 8003b88:	20000128 	.word	0x20000128

08003b8c <_close_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4d06      	ldr	r5, [pc, #24]	; (8003ba8 <_close_r+0x1c>)
 8003b90:	2300      	movs	r3, #0
 8003b92:	4604      	mov	r4, r0
 8003b94:	4608      	mov	r0, r1
 8003b96:	602b      	str	r3, [r5, #0]
 8003b98:	f7fc ff62 	bl	8000a60 <_close>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d102      	bne.n	8003ba6 <_close_r+0x1a>
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	b103      	cbz	r3, 8003ba6 <_close_r+0x1a>
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	20000128 	.word	0x20000128

08003bac <_fstat_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	4d07      	ldr	r5, [pc, #28]	; (8003bcc <_fstat_r+0x20>)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	602b      	str	r3, [r5, #0]
 8003bba:	f7fc ff5c 	bl	8000a76 <_fstat>
 8003bbe:	1c43      	adds	r3, r0, #1
 8003bc0:	d102      	bne.n	8003bc8 <_fstat_r+0x1c>
 8003bc2:	682b      	ldr	r3, [r5, #0]
 8003bc4:	b103      	cbz	r3, 8003bc8 <_fstat_r+0x1c>
 8003bc6:	6023      	str	r3, [r4, #0]
 8003bc8:	bd38      	pop	{r3, r4, r5, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000128 	.word	0x20000128

08003bd0 <_isatty_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4d06      	ldr	r5, [pc, #24]	; (8003bec <_isatty_r+0x1c>)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	f7fc ff5a 	bl	8000a94 <_isatty>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_isatty_r+0x1a>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_isatty_r+0x1a>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	20000128 	.word	0x20000128

08003bf0 <_lseek_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4d07      	ldr	r5, [pc, #28]	; (8003c10 <_lseek_r+0x20>)
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	4608      	mov	r0, r1
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	602a      	str	r2, [r5, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f7fc ff52 	bl	8000aa8 <_lseek>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_lseek_r+0x1e>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_lseek_r+0x1e>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	20000128 	.word	0x20000128

08003c14 <__malloc_lock>:
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <__malloc_lock+0x8>)
 8003c16:	f7ff bb92 	b.w	800333e <__retarget_lock_acquire_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	2000011c 	.word	0x2000011c

08003c20 <__malloc_unlock>:
 8003c20:	4801      	ldr	r0, [pc, #4]	; (8003c28 <__malloc_unlock+0x8>)
 8003c22:	f7ff bb8d 	b.w	8003340 <__retarget_lock_release_recursive>
 8003c26:	bf00      	nop
 8003c28:	2000011c 	.word	0x2000011c

08003c2c <_read_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4d07      	ldr	r5, [pc, #28]	; (8003c4c <_read_r+0x20>)
 8003c30:	4604      	mov	r4, r0
 8003c32:	4608      	mov	r0, r1
 8003c34:	4611      	mov	r1, r2
 8003c36:	2200      	movs	r2, #0
 8003c38:	602a      	str	r2, [r5, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f7fc fed7 	bl	80009ee <_read>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_read_r+0x1e>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_read_r+0x1e>
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	20000128 	.word	0x20000128

08003c50 <_init>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr

08003c5c <_fini>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	bf00      	nop
 8003c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c62:	bc08      	pop	{r3}
 8003c64:	469e      	mov	lr, r3
 8003c66:	4770      	bx	lr
